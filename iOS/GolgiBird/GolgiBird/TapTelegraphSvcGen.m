/* IS_AUTOGENERATED_SO_ALLOW_AUTODELETE=YES */
/* The previous line is to allow auto deletion */

#import "TapTelegraphSvcGen.h"

@implementation PlayerInfo

#ifdef GOLGI_STRUCT_NAME
#undef GOLGI_STRUCT_NAME
#endif
#define GOLGI_STRUCT_NAME @"PlayerInfo"

@synthesize golgiIdIsSet;
- (NSString *)getGolgiId
{
    return golgiId;
}

- (void)setGolgiId:(NSString *)_golgiId
{
    golgiId = _golgiId;
    golgiIdIsSet = (_golgiId != nil) ? YES : NO;
}

@synthesize nameIsSet;
- (NSString *)getName
{
    return name;
}

- (void)setName:(NSString *)_name
{
    name = _name;
    nameIsSet = (_name != nil) ? YES : NO;
}

@synthesize hiScoreIsSet;
- (NSInteger)getHiScore
{
    return hiScore;
}

- (void)setHiScore:(NSInteger )_hiScore
{
    hiScore = _hiScore;
    hiScoreIsSet = YES;
}

@synthesize gameIdIsSet;
- (NSString *)getGameId
{
    return gameId;
}

- (void)setGameId:(NSString *)_gameId
{
    gameId = _gameId;
    gameIdIsSet = (_gameId != nil) ? YES : NO;
}

@synthesize gameSeedIsSet;
- (NSInteger)getGameSeed
{
    return gameSeed;
}

- (void)setGameSeed:(NSInteger )_gameSeed
{
    gameSeed = _gameSeed;
    gameSeedIsSet = YES;
}

@synthesize appVerIsSet;
- (NSInteger)getAppVer
{
    return appVer;
}

- (void)setAppVer:(NSInteger )_appVer
{
    appVer = _appVer;
    appVerIsSet = YES;
}

@synthesize osIsSet;
- (NSString *)getOs
{
    return os;
}

- (void)setOs:(NSString *)_os
{
    os = _os;
    osIsSet = (_os != nil) ? YES : NO;
}


+ (PlayerInfo *)deserialiseFromString: (NSString *)string
{
    return [PlayerInfo deserialiseFromPayload:[GolgiPayload payloadWithString:string]];
}

+ (PlayerInfo *)deserialiseFromPayload: (GolgiPayload *)payload
{
    PlayerInfo *inst = [[PlayerInfo alloc] initWithIsSet:NO];
    BOOL corrupt = NO;

    {
        NSString *str;
        if((str = [payload getStringWithTag:@"1:"]) != nil){
            [inst setGolgiId:str];
        }
        else{
            corrupt = YES;
        }
    }

    {
        NSString *str;
        if((str = [payload getStringWithTag:@"2:"]) != nil){
            [inst setName:str];
        }
        else{
            corrupt = YES;
        }
    }

    {
        NSNumber *num;
        if((num = [payload getIntWithTag:@"3:"]) != nil){
            inst.hiScore = [num intValue];
        }
        else{
            corrupt = YES;
        }
    }

    {
        NSString *str;
        if((str = [payload getStringWithTag:@"4:"]) != nil){
            [inst setGameId:str];
        }
        else{
            corrupt = YES;
        }
    }

    {
        NSNumber *num;
        if((num = [payload getIntWithTag:@"5:"]) != nil){
            inst.gameSeed = [num intValue];
        }
        else{
            corrupt = YES;
        }
    }

    {
        NSNumber *num;
        if((num = [payload getIntWithTag:@"6:"]) != nil){
            inst.appVer = [num intValue];
        }
    }

    {
        NSString *str;
        if((str = [payload getStringWithTag:@"7:"]) != nil){
            [inst setOs:str];
        }
    }

    return (corrupt) ? nil : inst;
}

+ (PlayerInfo *)fromJSONString:(NSString *)jsonString
{
    GolgiJSONError *_localErr;
    return [PlayerInfo fromJSONString:jsonString error:&_localErr];
}

+ (PlayerInfo *)fromJSONString:(NSString *)jsonString error:(GolgiJSONError **)err
{
    GolgiJSONObject *gjo = [GolgiJSONObject createFromString:jsonString error:err];
    if(gjo == nil){
        if(*err == nil){
            *err = [GolgiJSONError createWithErrType:GOLGI_ERRTYPE_MALFORMED_JSON andErrText:@"Malformed JSON"];
        }
        else if((*err).errType < 0){
            *err = [GolgiJSONError createWithErrType:GOLGI_ERRTYPE_MALFORMED_JSON andErrText:(*err).errText];
        }
        return nil;
    }
    else{
        return [PlayerInfo fromJSONObject:gjo error:err];
    }
}

+ (PlayerInfo *)fromJSONObject:(GolgiJSONObject *)jsonObj
{
    GolgiJSONError *_localErr;
    return [PlayerInfo fromJSONObject:jsonObj error:&_localErr];
}

+ (PlayerInfo *)fromJSONObject:(GolgiJSONObject *)jsonObj error:(GolgiJSONError **)_err
{
    *_err = nil;
    if(jsonObj == nil) return nil;
    PlayerInfo *inst = [[PlayerInfo alloc] initWithIsSet:NO];
    BOOL corrupt = NO;

    if(!corrupt){
        NSString *str;
        if((str = [jsonObj getStringWithKey:@"golgiId" error:_err]) != nil){
            [inst setGolgiId:str];
        }
        else if(*_err != nil){
            corrupt = YES;
            [*_err appendErrText:[NSString stringWithFormat:@"\nWhile decoding 'golgiId' in '%@'", GOLGI_STRUCT_NAME]];
        }
        else{
            corrupt = YES;
            *_err = [GolgiJSONError createWithErrType:-1 andErrText:[NSString stringWithFormat:@"Missing mandatory field 'golgiId' in '%@'", GOLGI_STRUCT_NAME]];
        }
    }
    if(!corrupt){
        NSString *str;
        if((str = [jsonObj getStringWithKey:@"name" error:_err]) != nil){
            [inst setName:str];
        }
        else if(*_err != nil){
            corrupt = YES;
            [*_err appendErrText:[NSString stringWithFormat:@"\nWhile decoding 'name' in '%@'", GOLGI_STRUCT_NAME]];
        }
        else{
            corrupt = YES;
            *_err = [GolgiJSONError createWithErrType:-1 andErrText:[NSString stringWithFormat:@"Missing mandatory field 'name' in '%@'", GOLGI_STRUCT_NAME]];
        }
    }
    if(!corrupt){
        NSNumber *num;
        if((num = [jsonObj getIntegerWithKey:@"hiScore" error:_err]) != nil){
            inst.hiScore = num.intValue;
        }
        else if(*_err != nil){
            corrupt = YES;
            [*_err appendErrText:[NSString stringWithFormat:@"\nWhile decoding 'hiScore' in '%@'", GOLGI_STRUCT_NAME]];
        }
        else{
            corrupt = YES;
            *_err = [GolgiJSONError createWithErrType:-1 andErrText:[NSString stringWithFormat:@"Missing mandatory i32 'hiScore' in '%@'", GOLGI_STRUCT_NAME]];
        }
    }
    if(!corrupt){
        NSString *str;
        if((str = [jsonObj getStringWithKey:@"gameId" error:_err]) != nil){
            [inst setGameId:str];
        }
        else if(*_err != nil){
            corrupt = YES;
            [*_err appendErrText:[NSString stringWithFormat:@"\nWhile decoding 'gameId' in '%@'", GOLGI_STRUCT_NAME]];
        }
        else{
            corrupt = YES;
            *_err = [GolgiJSONError createWithErrType:-1 andErrText:[NSString stringWithFormat:@"Missing mandatory field 'gameId' in '%@'", GOLGI_STRUCT_NAME]];
        }
    }
    if(!corrupt){
        NSNumber *num;
        if((num = [jsonObj getIntegerWithKey:@"gameSeed" error:_err]) != nil){
            inst.gameSeed = num.intValue;
        }
        else if(*_err != nil){
            corrupt = YES;
            [*_err appendErrText:[NSString stringWithFormat:@"\nWhile decoding 'gameSeed' in '%@'", GOLGI_STRUCT_NAME]];
        }
        else{
            corrupt = YES;
            *_err = [GolgiJSONError createWithErrType:-1 andErrText:[NSString stringWithFormat:@"Missing mandatory i32 'gameSeed' in '%@'", GOLGI_STRUCT_NAME]];
        }
    }
    if(!corrupt){
        NSNumber *num;
        if((num = [jsonObj getIntegerWithKey:@"appVer" error:_err]) != nil){
            inst.appVer = num.intValue;
        }
        else if(*_err != nil){
            corrupt = YES;
            [*_err appendErrText:[NSString stringWithFormat:@"\nWhile decoding 'appVer' in '%@'", GOLGI_STRUCT_NAME]];
        }
    }
    if(!corrupt){
        NSString *str;
        if((str = [jsonObj getStringWithKey:@"os" error:_err]) != nil){
            [inst setOs:str];
        }
        else if(*_err != nil){
            corrupt = YES;
            [*_err appendErrText:[NSString stringWithFormat:@"\nWhile decoding 'os' in '%@'", GOLGI_STRUCT_NAME]];
        }
    }

    return (corrupt) ? nil : inst;
}

- (NSString *)toJSON
{
    NSMutableString *_str = [[NSMutableString alloc] init];
    NSString *_comma = @"";

    [_str appendString:@"{"];

    if(golgiIdIsSet){
        [_str appendFormat:@"%@%@%@", _comma, [CSL genJSONTag:@"golgiId"], [CSL encodeJSString:golgiId]];
        _comma = @",";
    }
    if(nameIsSet){
        [_str appendFormat:@"%@%@%@", _comma, [CSL genJSONTag:@"name"], [CSL encodeJSString:name]];
        _comma = @",";
    }
    if(hiScoreIsSet){
        [_str appendFormat:@"%@%@%ld", _comma, [CSL genJSONTag:@"hiScore"], (long)hiScore];
        _comma = @",";
    }
    if(gameIdIsSet){
        [_str appendFormat:@"%@%@%@", _comma, [CSL genJSONTag:@"gameId"], [CSL encodeJSString:gameId]];
        _comma = @",";
    }
    if(gameSeedIsSet){
        [_str appendFormat:@"%@%@%ld", _comma, [CSL genJSONTag:@"gameSeed"], (long)gameSeed];
        _comma = @",";
    }
    if(appVerIsSet){
        [_str appendFormat:@"%@%@%ld", _comma, [CSL genJSONTag:@"appVer"], (long)appVer];
        _comma = @",";
    }
    if(osIsSet){
        [_str appendFormat:@"%@%@%@", _comma, [CSL genJSONTag:@"os"], [CSL encodeJSString:os]];
        _comma = @",";
    }

    [_str appendString:@"}"];

    return [NSString stringWithString:_str];
}

- (NSString *)serialise
{
    return [self serialiseWithPrefix:@""];
}

- (NSString *)serialiseWithPrefix:(NSString *)prefix
{
    NSMutableString *_str = [[NSMutableString alloc] init];

    if(golgiIdIsSet){
        [_str appendFormat:@"%@1: \"%@\"\n", prefix, [CSL  NTLEscapeString:golgiId]];
    }
    if(nameIsSet){
        [_str appendFormat:@"%@2: \"%@\"\n", prefix, [CSL  NTLEscapeString:name]];
    }
    if(hiScoreIsSet){
        [_str appendFormat:@"%@3: %ld\n", prefix, (long)hiScore];
    }
    if(gameIdIsSet){
        [_str appendFormat:@"%@4: \"%@\"\n", prefix, [CSL  NTLEscapeString:gameId]];
    }
    if(gameSeedIsSet){
        [_str appendFormat:@"%@5: %ld\n", prefix, (long)gameSeed];
    }
    if(appVerIsSet){
        [_str appendFormat:@"%@6: %ld\n", prefix, (long)appVer];
    }
    if(osIsSet){
        [_str appendFormat:@"%@7: \"%@\"\n", prefix, [CSL  NTLEscapeString:os]];
    }

    return [NSString stringWithString:_str];
}

- (PlayerInfo *)init
{
    return [self initWithIsSet:YES];
}

- (id)initWithIsSet:(BOOL)defIsSet
{
    if((self = [super init]) != nil){
        golgiId = @"";
        golgiIdIsSet = defIsSet;
        name = @"";
        nameIsSet = defIsSet;
        hiScoreIsSet = defIsSet;
        gameId = @"";
        gameIdIsSet = defIsSet;
        gameSeedIsSet = defIsSet;
        os = @"";
    }

    return self;

}

@end
@implementation TapData

#ifdef GOLGI_STRUCT_NAME
#undef GOLGI_STRUCT_NAME
#endif
#define GOLGI_STRUCT_NAME @"TapData"

@synthesize gameIdIsSet;
- (NSString *)getGameId
{
    return gameId;
}

- (void)setGameId:(NSString *)_gameId
{
    gameId = _gameId;
    gameIdIsSet = (_gameId != nil) ? YES : NO;
}

@synthesize screenOffsetIsSet;
- (NSInteger)getScreenOffset
{
    return screenOffset;
}

- (void)setScreenOffset:(NSInteger )_screenOffset
{
    screenOffset = _screenOffset;
    screenOffsetIsSet = YES;
}

@synthesize playerYIsSet;
- (NSInteger)getPlayerY
{
    return playerY;
}

- (void)setPlayerY:(NSInteger )_playerY
{
    playerY = _playerY;
    playerYIsSet = YES;
}

@synthesize deltaYIsSet;
- (NSInteger)getDeltaY
{
    return deltaY;
}

- (void)setDeltaY:(NSInteger )_deltaY
{
    deltaY = _deltaY;
    deltaYIsSet = YES;
}

@synthesize indexIsSet;
- (NSInteger)getIndex
{
    return index;
}

- (void)setIndex:(NSInteger )_index
{
    index = _index;
    indexIsSet = YES;
}

@synthesize scoreIsSet;
- (NSInteger)getScore
{
    return score;
}

- (void)setScore:(NSInteger )_score
{
    score = _score;
    scoreIsSet = YES;
}


+ (TapData *)deserialiseFromString: (NSString *)string
{
    return [TapData deserialiseFromPayload:[GolgiPayload payloadWithString:string]];
}

+ (TapData *)deserialiseFromPayload: (GolgiPayload *)payload
{
    TapData *inst = [[TapData alloc] initWithIsSet:NO];
    BOOL corrupt = NO;

    {
        NSString *str;
        if((str = [payload getStringWithTag:@"1:"]) != nil){
            [inst setGameId:str];
        }
        else{
            corrupt = YES;
        }
    }

    {
        NSNumber *num;
        if((num = [payload getIntWithTag:@"2:"]) != nil){
            inst.screenOffset = [num intValue];
        }
        else{
            corrupt = YES;
        }
    }

    {
        NSNumber *num;
        if((num = [payload getIntWithTag:@"3:"]) != nil){
            inst.playerY = [num intValue];
        }
        else{
            corrupt = YES;
        }
    }

    {
        NSNumber *num;
        if((num = [payload getIntWithTag:@"4:"]) != nil){
            inst.deltaY = [num intValue];
        }
        else{
            corrupt = YES;
        }
    }

    {
        NSNumber *num;
        if((num = [payload getIntWithTag:@"5:"]) != nil){
            inst.index = [num intValue];
        }
        else{
            corrupt = YES;
        }
    }

    {
        NSNumber *num;
        if((num = [payload getIntWithTag:@"6:"]) != nil){
            inst.score = [num intValue];
        }
        else{
            corrupt = YES;
        }
    }

    return (corrupt) ? nil : inst;
}

+ (TapData *)fromJSONString:(NSString *)jsonString
{
    GolgiJSONError *_localErr;
    return [TapData fromJSONString:jsonString error:&_localErr];
}

+ (TapData *)fromJSONString:(NSString *)jsonString error:(GolgiJSONError **)err
{
    GolgiJSONObject *gjo = [GolgiJSONObject createFromString:jsonString error:err];
    if(gjo == nil){
        if(*err == nil){
            *err = [GolgiJSONError createWithErrType:GOLGI_ERRTYPE_MALFORMED_JSON andErrText:@"Malformed JSON"];
        }
        else if((*err).errType < 0){
            *err = [GolgiJSONError createWithErrType:GOLGI_ERRTYPE_MALFORMED_JSON andErrText:(*err).errText];
        }
        return nil;
    }
    else{
        return [TapData fromJSONObject:gjo error:err];
    }
}

+ (TapData *)fromJSONObject:(GolgiJSONObject *)jsonObj
{
    GolgiJSONError *_localErr;
    return [TapData fromJSONObject:jsonObj error:&_localErr];
}

+ (TapData *)fromJSONObject:(GolgiJSONObject *)jsonObj error:(GolgiJSONError **)_err
{
    *_err = nil;
    if(jsonObj == nil) return nil;
    TapData *inst = [[TapData alloc] initWithIsSet:NO];
    BOOL corrupt = NO;

    if(!corrupt){
        NSString *str;
        if((str = [jsonObj getStringWithKey:@"gameId" error:_err]) != nil){
            [inst setGameId:str];
        }
        else if(*_err != nil){
            corrupt = YES;
            [*_err appendErrText:[NSString stringWithFormat:@"\nWhile decoding 'gameId' in '%@'", GOLGI_STRUCT_NAME]];
        }
        else{
            corrupt = YES;
            *_err = [GolgiJSONError createWithErrType:-1 andErrText:[NSString stringWithFormat:@"Missing mandatory field 'gameId' in '%@'", GOLGI_STRUCT_NAME]];
        }
    }
    if(!corrupt){
        NSNumber *num;
        if((num = [jsonObj getIntegerWithKey:@"screenOffset" error:_err]) != nil){
            inst.screenOffset = num.intValue;
        }
        else if(*_err != nil){
            corrupt = YES;
            [*_err appendErrText:[NSString stringWithFormat:@"\nWhile decoding 'screenOffset' in '%@'", GOLGI_STRUCT_NAME]];
        }
        else{
            corrupt = YES;
            *_err = [GolgiJSONError createWithErrType:-1 andErrText:[NSString stringWithFormat:@"Missing mandatory i32 'screenOffset' in '%@'", GOLGI_STRUCT_NAME]];
        }
    }
    if(!corrupt){
        NSNumber *num;
        if((num = [jsonObj getIntegerWithKey:@"playerY" error:_err]) != nil){
            inst.playerY = num.intValue;
        }
        else if(*_err != nil){
            corrupt = YES;
            [*_err appendErrText:[NSString stringWithFormat:@"\nWhile decoding 'playerY' in '%@'", GOLGI_STRUCT_NAME]];
        }
        else{
            corrupt = YES;
            *_err = [GolgiJSONError createWithErrType:-1 andErrText:[NSString stringWithFormat:@"Missing mandatory i32 'playerY' in '%@'", GOLGI_STRUCT_NAME]];
        }
    }
    if(!corrupt){
        NSNumber *num;
        if((num = [jsonObj getIntegerWithKey:@"deltaY" error:_err]) != nil){
            inst.deltaY = num.intValue;
        }
        else if(*_err != nil){
            corrupt = YES;
            [*_err appendErrText:[NSString stringWithFormat:@"\nWhile decoding 'deltaY' in '%@'", GOLGI_STRUCT_NAME]];
        }
        else{
            corrupt = YES;
            *_err = [GolgiJSONError createWithErrType:-1 andErrText:[NSString stringWithFormat:@"Missing mandatory i32 'deltaY' in '%@'", GOLGI_STRUCT_NAME]];
        }
    }
    if(!corrupt){
        NSNumber *num;
        if((num = [jsonObj getIntegerWithKey:@"index" error:_err]) != nil){
            inst.index = num.intValue;
        }
        else if(*_err != nil){
            corrupt = YES;
            [*_err appendErrText:[NSString stringWithFormat:@"\nWhile decoding 'index' in '%@'", GOLGI_STRUCT_NAME]];
        }
        else{
            corrupt = YES;
            *_err = [GolgiJSONError createWithErrType:-1 andErrText:[NSString stringWithFormat:@"Missing mandatory i32 'index' in '%@'", GOLGI_STRUCT_NAME]];
        }
    }
    if(!corrupt){
        NSNumber *num;
        if((num = [jsonObj getIntegerWithKey:@"score" error:_err]) != nil){
            inst.score = num.intValue;
        }
        else if(*_err != nil){
            corrupt = YES;
            [*_err appendErrText:[NSString stringWithFormat:@"\nWhile decoding 'score' in '%@'", GOLGI_STRUCT_NAME]];
        }
        else{
            corrupt = YES;
            *_err = [GolgiJSONError createWithErrType:-1 andErrText:[NSString stringWithFormat:@"Missing mandatory i32 'score' in '%@'", GOLGI_STRUCT_NAME]];
        }
    }

    return (corrupt) ? nil : inst;
}

- (NSString *)toJSON
{
    NSMutableString *_str = [[NSMutableString alloc] init];
    NSString *_comma = @"";

    [_str appendString:@"{"];

    if(gameIdIsSet){
        [_str appendFormat:@"%@%@%@", _comma, [CSL genJSONTag:@"gameId"], [CSL encodeJSString:gameId]];
        _comma = @",";
    }
    if(screenOffsetIsSet){
        [_str appendFormat:@"%@%@%ld", _comma, [CSL genJSONTag:@"screenOffset"], (long)screenOffset];
        _comma = @",";
    }
    if(playerYIsSet){
        [_str appendFormat:@"%@%@%ld", _comma, [CSL genJSONTag:@"playerY"], (long)playerY];
        _comma = @",";
    }
    if(deltaYIsSet){
        [_str appendFormat:@"%@%@%ld", _comma, [CSL genJSONTag:@"deltaY"], (long)deltaY];
        _comma = @",";
    }
    if(indexIsSet){
        [_str appendFormat:@"%@%@%ld", _comma, [CSL genJSONTag:@"index"], (long)index];
        _comma = @",";
    }
    if(scoreIsSet){
        [_str appendFormat:@"%@%@%ld", _comma, [CSL genJSONTag:@"score"], (long)score];
        _comma = @",";
    }

    [_str appendString:@"}"];

    return [NSString stringWithString:_str];
}

- (NSString *)serialise
{
    return [self serialiseWithPrefix:@""];
}

- (NSString *)serialiseWithPrefix:(NSString *)prefix
{
    NSMutableString *_str = [[NSMutableString alloc] init];

    if(gameIdIsSet){
        [_str appendFormat:@"%@1: \"%@\"\n", prefix, [CSL  NTLEscapeString:gameId]];
    }
    if(screenOffsetIsSet){
        [_str appendFormat:@"%@2: %ld\n", prefix, (long)screenOffset];
    }
    if(playerYIsSet){
        [_str appendFormat:@"%@3: %ld\n", prefix, (long)playerY];
    }
    if(deltaYIsSet){
        [_str appendFormat:@"%@4: %ld\n", prefix, (long)deltaY];
    }
    if(indexIsSet){
        [_str appendFormat:@"%@5: %ld\n", prefix, (long)index];
    }
    if(scoreIsSet){
        [_str appendFormat:@"%@6: %ld\n", prefix, (long)score];
    }

    return [NSString stringWithString:_str];
}

- (TapData *)init
{
    return [self initWithIsSet:YES];
}

- (id)initWithIsSet:(BOOL)defIsSet
{
    if((self = [super init]) != nil){
        gameId = @"";
        gameIdIsSet = defIsSet;
        screenOffsetIsSet = defIsSet;
        playerYIsSet = defIsSet;
        deltaYIsSet = defIsSet;
        indexIsSet = defIsSet;
        scoreIsSet = defIsSet;
    }

    return self;

}

@end
@implementation GameOverData

#ifdef GOLGI_STRUCT_NAME
#undef GOLGI_STRUCT_NAME
#endif
#define GOLGI_STRUCT_NAME @"GameOverData"

@synthesize gameIdIsSet;
- (NSString *)getGameId
{
    return gameId;
}

- (void)setGameId:(NSString *)_gameId
{
    gameId = _gameId;
    gameIdIsSet = (_gameId != nil) ? YES : NO;
}

@synthesize screenOffsetIsSet;
- (NSInteger)getScreenOffset
{
    return screenOffset;
}

- (void)setScreenOffset:(NSInteger )_screenOffset
{
    screenOffset = _screenOffset;
    screenOffsetIsSet = YES;
}

@synthesize playerYIsSet;
- (NSInteger)getPlayerY
{
    return playerY;
}

- (void)setPlayerY:(NSInteger )_playerY
{
    playerY = _playerY;
    playerYIsSet = YES;
}

@synthesize scoreIsSet;
- (NSInteger)getScore
{
    return score;
}

- (void)setScore:(NSInteger )_score
{
    score = _score;
    scoreIsSet = YES;
}


+ (GameOverData *)deserialiseFromString: (NSString *)string
{
    return [GameOverData deserialiseFromPayload:[GolgiPayload payloadWithString:string]];
}

+ (GameOverData *)deserialiseFromPayload: (GolgiPayload *)payload
{
    GameOverData *inst = [[GameOverData alloc] initWithIsSet:NO];
    BOOL corrupt = NO;

    {
        NSString *str;
        if((str = [payload getStringWithTag:@"1:"]) != nil){
            [inst setGameId:str];
        }
        else{
            corrupt = YES;
        }
    }

    {
        NSNumber *num;
        if((num = [payload getIntWithTag:@"2:"]) != nil){
            inst.screenOffset = [num intValue];
        }
        else{
            corrupt = YES;
        }
    }

    {
        NSNumber *num;
        if((num = [payload getIntWithTag:@"3:"]) != nil){
            inst.playerY = [num intValue];
        }
        else{
            corrupt = YES;
        }
    }

    {
        NSNumber *num;
        if((num = [payload getIntWithTag:@"4:"]) != nil){
            inst.score = [num intValue];
        }
        else{
            corrupt = YES;
        }
    }

    return (corrupt) ? nil : inst;
}

+ (GameOverData *)fromJSONString:(NSString *)jsonString
{
    GolgiJSONError *_localErr;
    return [GameOverData fromJSONString:jsonString error:&_localErr];
}

+ (GameOverData *)fromJSONString:(NSString *)jsonString error:(GolgiJSONError **)err
{
    GolgiJSONObject *gjo = [GolgiJSONObject createFromString:jsonString error:err];
    if(gjo == nil){
        if(*err == nil){
            *err = [GolgiJSONError createWithErrType:GOLGI_ERRTYPE_MALFORMED_JSON andErrText:@"Malformed JSON"];
        }
        else if((*err).errType < 0){
            *err = [GolgiJSONError createWithErrType:GOLGI_ERRTYPE_MALFORMED_JSON andErrText:(*err).errText];
        }
        return nil;
    }
    else{
        return [GameOverData fromJSONObject:gjo error:err];
    }
}

+ (GameOverData *)fromJSONObject:(GolgiJSONObject *)jsonObj
{
    GolgiJSONError *_localErr;
    return [GameOverData fromJSONObject:jsonObj error:&_localErr];
}

+ (GameOverData *)fromJSONObject:(GolgiJSONObject *)jsonObj error:(GolgiJSONError **)_err
{
    *_err = nil;
    if(jsonObj == nil) return nil;
    GameOverData *inst = [[GameOverData alloc] initWithIsSet:NO];
    BOOL corrupt = NO;

    if(!corrupt){
        NSString *str;
        if((str = [jsonObj getStringWithKey:@"gameId" error:_err]) != nil){
            [inst setGameId:str];
        }
        else if(*_err != nil){
            corrupt = YES;
            [*_err appendErrText:[NSString stringWithFormat:@"\nWhile decoding 'gameId' in '%@'", GOLGI_STRUCT_NAME]];
        }
        else{
            corrupt = YES;
            *_err = [GolgiJSONError createWithErrType:-1 andErrText:[NSString stringWithFormat:@"Missing mandatory field 'gameId' in '%@'", GOLGI_STRUCT_NAME]];
        }
    }
    if(!corrupt){
        NSNumber *num;
        if((num = [jsonObj getIntegerWithKey:@"screenOffset" error:_err]) != nil){
            inst.screenOffset = num.intValue;
        }
        else if(*_err != nil){
            corrupt = YES;
            [*_err appendErrText:[NSString stringWithFormat:@"\nWhile decoding 'screenOffset' in '%@'", GOLGI_STRUCT_NAME]];
        }
        else{
            corrupt = YES;
            *_err = [GolgiJSONError createWithErrType:-1 andErrText:[NSString stringWithFormat:@"Missing mandatory i32 'screenOffset' in '%@'", GOLGI_STRUCT_NAME]];
        }
    }
    if(!corrupt){
        NSNumber *num;
        if((num = [jsonObj getIntegerWithKey:@"playerY" error:_err]) != nil){
            inst.playerY = num.intValue;
        }
        else if(*_err != nil){
            corrupt = YES;
            [*_err appendErrText:[NSString stringWithFormat:@"\nWhile decoding 'playerY' in '%@'", GOLGI_STRUCT_NAME]];
        }
        else{
            corrupt = YES;
            *_err = [GolgiJSONError createWithErrType:-1 andErrText:[NSString stringWithFormat:@"Missing mandatory i32 'playerY' in '%@'", GOLGI_STRUCT_NAME]];
        }
    }
    if(!corrupt){
        NSNumber *num;
        if((num = [jsonObj getIntegerWithKey:@"score" error:_err]) != nil){
            inst.score = num.intValue;
        }
        else if(*_err != nil){
            corrupt = YES;
            [*_err appendErrText:[NSString stringWithFormat:@"\nWhile decoding 'score' in '%@'", GOLGI_STRUCT_NAME]];
        }
        else{
            corrupt = YES;
            *_err = [GolgiJSONError createWithErrType:-1 andErrText:[NSString stringWithFormat:@"Missing mandatory i32 'score' in '%@'", GOLGI_STRUCT_NAME]];
        }
    }

    return (corrupt) ? nil : inst;
}

- (NSString *)toJSON
{
    NSMutableString *_str = [[NSMutableString alloc] init];
    NSString *_comma = @"";

    [_str appendString:@"{"];

    if(gameIdIsSet){
        [_str appendFormat:@"%@%@%@", _comma, [CSL genJSONTag:@"gameId"], [CSL encodeJSString:gameId]];
        _comma = @",";
    }
    if(screenOffsetIsSet){
        [_str appendFormat:@"%@%@%ld", _comma, [CSL genJSONTag:@"screenOffset"], (long)screenOffset];
        _comma = @",";
    }
    if(playerYIsSet){
        [_str appendFormat:@"%@%@%ld", _comma, [CSL genJSONTag:@"playerY"], (long)playerY];
        _comma = @",";
    }
    if(scoreIsSet){
        [_str appendFormat:@"%@%@%ld", _comma, [CSL genJSONTag:@"score"], (long)score];
        _comma = @",";
    }

    [_str appendString:@"}"];

    return [NSString stringWithString:_str];
}

- (NSString *)serialise
{
    return [self serialiseWithPrefix:@""];
}

- (NSString *)serialiseWithPrefix:(NSString *)prefix
{
    NSMutableString *_str = [[NSMutableString alloc] init];

    if(gameIdIsSet){
        [_str appendFormat:@"%@1: \"%@\"\n", prefix, [CSL  NTLEscapeString:gameId]];
    }
    if(screenOffsetIsSet){
        [_str appendFormat:@"%@2: %ld\n", prefix, (long)screenOffset];
    }
    if(playerYIsSet){
        [_str appendFormat:@"%@3: %ld\n", prefix, (long)playerY];
    }
    if(scoreIsSet){
        [_str appendFormat:@"%@4: %ld\n", prefix, (long)score];
    }

    return [NSString stringWithString:_str];
}

- (GameOverData *)init
{
    return [self initWithIsSet:YES];
}

- (id)initWithIsSet:(BOOL)defIsSet
{
    if((self = [super init]) != nil){
        gameId = @"";
        gameIdIsSet = defIsSet;
        screenOffsetIsSet = defIsSet;
        playerYIsSet = defIsSet;
        scoreIsSet = defIsSet;
    }

    return self;

}

@end
@implementation HiScoreData

#ifdef GOLGI_STRUCT_NAME
#undef GOLGI_STRUCT_NAME
#endif
#define GOLGI_STRUCT_NAME @"HiScoreData"

@synthesize nameIsSet;
- (NSString *)getName
{
    return name;
}

- (void)setName:(NSString *)_name
{
    name = _name;
    nameIsSet = (_name != nil) ? YES : NO;
}

@synthesize scoreIsSet;
- (NSInteger)getScore
{
    return score;
}

- (void)setScore:(NSInteger )_score
{
    score = _score;
    scoreIsSet = YES;
}


+ (HiScoreData *)deserialiseFromString: (NSString *)string
{
    return [HiScoreData deserialiseFromPayload:[GolgiPayload payloadWithString:string]];
}

+ (HiScoreData *)deserialiseFromPayload: (GolgiPayload *)payload
{
    HiScoreData *inst = [[HiScoreData alloc] initWithIsSet:NO];
    BOOL corrupt = NO;

    {
        NSString *str;
        if((str = [payload getStringWithTag:@"1:"]) != nil){
            [inst setName:str];
        }
        else{
            corrupt = YES;
        }
    }

    {
        NSNumber *num;
        if((num = [payload getIntWithTag:@"2:"]) != nil){
            inst.score = [num intValue];
        }
        else{
            corrupt = YES;
        }
    }

    return (corrupt) ? nil : inst;
}

+ (HiScoreData *)fromJSONString:(NSString *)jsonString
{
    GolgiJSONError *_localErr;
    return [HiScoreData fromJSONString:jsonString error:&_localErr];
}

+ (HiScoreData *)fromJSONString:(NSString *)jsonString error:(GolgiJSONError **)err
{
    GolgiJSONObject *gjo = [GolgiJSONObject createFromString:jsonString error:err];
    if(gjo == nil){
        if(*err == nil){
            *err = [GolgiJSONError createWithErrType:GOLGI_ERRTYPE_MALFORMED_JSON andErrText:@"Malformed JSON"];
        }
        else if((*err).errType < 0){
            *err = [GolgiJSONError createWithErrType:GOLGI_ERRTYPE_MALFORMED_JSON andErrText:(*err).errText];
        }
        return nil;
    }
    else{
        return [HiScoreData fromJSONObject:gjo error:err];
    }
}

+ (HiScoreData *)fromJSONObject:(GolgiJSONObject *)jsonObj
{
    GolgiJSONError *_localErr;
    return [HiScoreData fromJSONObject:jsonObj error:&_localErr];
}

+ (HiScoreData *)fromJSONObject:(GolgiJSONObject *)jsonObj error:(GolgiJSONError **)_err
{
    *_err = nil;
    if(jsonObj == nil) return nil;
    HiScoreData *inst = [[HiScoreData alloc] initWithIsSet:NO];
    BOOL corrupt = NO;

    if(!corrupt){
        NSString *str;
        if((str = [jsonObj getStringWithKey:@"name" error:_err]) != nil){
            [inst setName:str];
        }
        else if(*_err != nil){
            corrupt = YES;
            [*_err appendErrText:[NSString stringWithFormat:@"\nWhile decoding 'name' in '%@'", GOLGI_STRUCT_NAME]];
        }
        else{
            corrupt = YES;
            *_err = [GolgiJSONError createWithErrType:-1 andErrText:[NSString stringWithFormat:@"Missing mandatory field 'name' in '%@'", GOLGI_STRUCT_NAME]];
        }
    }
    if(!corrupt){
        NSNumber *num;
        if((num = [jsonObj getIntegerWithKey:@"score" error:_err]) != nil){
            inst.score = num.intValue;
        }
        else if(*_err != nil){
            corrupt = YES;
            [*_err appendErrText:[NSString stringWithFormat:@"\nWhile decoding 'score' in '%@'", GOLGI_STRUCT_NAME]];
        }
        else{
            corrupt = YES;
            *_err = [GolgiJSONError createWithErrType:-1 andErrText:[NSString stringWithFormat:@"Missing mandatory i32 'score' in '%@'", GOLGI_STRUCT_NAME]];
        }
    }

    return (corrupt) ? nil : inst;
}

- (NSString *)toJSON
{
    NSMutableString *_str = [[NSMutableString alloc] init];
    NSString *_comma = @"";

    [_str appendString:@"{"];

    if(nameIsSet){
        [_str appendFormat:@"%@%@%@", _comma, [CSL genJSONTag:@"name"], [CSL encodeJSString:name]];
        _comma = @",";
    }
    if(scoreIsSet){
        [_str appendFormat:@"%@%@%ld", _comma, [CSL genJSONTag:@"score"], (long)score];
        _comma = @",";
    }

    [_str appendString:@"}"];

    return [NSString stringWithString:_str];
}

- (NSString *)serialise
{
    return [self serialiseWithPrefix:@""];
}

- (NSString *)serialiseWithPrefix:(NSString *)prefix
{
    NSMutableString *_str = [[NSMutableString alloc] init];

    if(nameIsSet){
        [_str appendFormat:@"%@1: \"%@\"\n", prefix, [CSL  NTLEscapeString:name]];
    }
    if(scoreIsSet){
        [_str appendFormat:@"%@2: %ld\n", prefix, (long)score];
    }

    return [NSString stringWithString:_str];
}

- (HiScoreData *)init
{
    return [self initWithIsSet:YES];
}

- (id)initWithIsSet:(BOOL)defIsSet
{
    if((self = [super init]) != nil){
        name = @"";
        nameIsSet = defIsSet;
        scoreIsSet = defIsSet;
    }

    return self;

}

@end
@implementation TapTelegraph_startGame_reqArg

#ifdef GOLGI_STRUCT_NAME
#undef GOLGI_STRUCT_NAME
#endif
#define GOLGI_STRUCT_NAME @"TapTelegraph_startGame_reqArg"

@synthesize playerInfoIsSet;
- (PlayerInfo *)getPlayerInfo
{
    return playerInfo;
}

- (void)setPlayerInfo:(PlayerInfo *)_playerInfo
{
    playerInfo = _playerInfo;
    playerInfoIsSet = (_playerInfo != nil) ? YES : NO;
}


+ (TapTelegraph_startGame_reqArg *)deserialiseFromString: (NSString *)string
{
    return [TapTelegraph_startGame_reqArg deserialiseFromPayload:[GolgiPayload payloadWithString:string]];
}

+ (TapTelegraph_startGame_reqArg *)deserialiseFromPayload: (GolgiPayload *)payload
{
    TapTelegraph_startGame_reqArg *inst = [[TapTelegraph_startGame_reqArg alloc] initWithIsSet:NO];
    BOOL corrupt = NO;

    {
        GolgiPayload *nestedPayload;
        if((nestedPayload = [payload getNestedWithTag:@"1"]) != nil){
            [inst setPlayerInfo:[PlayerInfo deserialiseFromPayload:nestedPayload]];
        }
        else{
            [inst setPlayerInfo:nil];
        }
    }
    if([inst getPlayerInfo] == nil){
        corrupt = YES;
    }

    return (corrupt) ? nil : inst;
}

+ (TapTelegraph_startGame_reqArg *)fromJSONString:(NSString *)jsonString
{
    GolgiJSONError *_localErr;
    return [TapTelegraph_startGame_reqArg fromJSONString:jsonString error:&_localErr];
}

+ (TapTelegraph_startGame_reqArg *)fromJSONString:(NSString *)jsonString error:(GolgiJSONError **)err
{
    GolgiJSONObject *gjo = [GolgiJSONObject createFromString:jsonString error:err];
    if(gjo == nil){
        if(*err == nil){
            *err = [GolgiJSONError createWithErrType:GOLGI_ERRTYPE_MALFORMED_JSON andErrText:@"Malformed JSON"];
        }
        else if((*err).errType < 0){
            *err = [GolgiJSONError createWithErrType:GOLGI_ERRTYPE_MALFORMED_JSON andErrText:(*err).errText];
        }
        return nil;
    }
    else{
        return [TapTelegraph_startGame_reqArg fromJSONObject:gjo error:err];
    }
}

+ (TapTelegraph_startGame_reqArg *)fromJSONObject:(GolgiJSONObject *)jsonObj
{
    GolgiJSONError *_localErr;
    return [TapTelegraph_startGame_reqArg fromJSONObject:jsonObj error:&_localErr];
}

+ (TapTelegraph_startGame_reqArg *)fromJSONObject:(GolgiJSONObject *)jsonObj error:(GolgiJSONError **)_err
{
    *_err = nil;
    if(jsonObj == nil) return nil;
    TapTelegraph_startGame_reqArg *inst = [[TapTelegraph_startGame_reqArg alloc] initWithIsSet:NO];
    BOOL corrupt = NO;

    if(!corrupt){
        GolgiJSONObject *obj = nil;
        PlayerInfo *_objInst = nil;
        if((obj = [jsonObj getObjectWithKey:@"playerInfo" error:_err]) != nil){
            if((_objInst = [PlayerInfo fromJSONObject:obj error:_err]) == nil){
                corrupt = YES;
                [*_err appendErrText:[NSString stringWithFormat:@"\nWhile decoding 'playerInfo' in '%@'", GOLGI_STRUCT_NAME]];
            }
        }
        else if(*_err != nil){
            corrupt = YES;
            [*_err appendErrText:[NSString stringWithFormat:@"\nWhile decoding 'playerInfo' in '%@'", GOLGI_STRUCT_NAME]];
        }
        if(_objInst != nil){
            inst.playerInfo = _objInst;
        }
        else if(*_err == nil && !corrupt){
            corrupt = YES;
            *_err = [GolgiJSONError createWithErrType:-1 andErrText:[NSString stringWithFormat:@"Missing mandatory field 'playerInfo' in '%@'", GOLGI_STRUCT_NAME]];
        }
    }

    return (corrupt) ? nil : inst;
}

- (NSString *)toJSON
{
    NSMutableString *_str = [[NSMutableString alloc] init];
    NSString *_comma = @"";

    [_str appendString:@"{"];

    if(playerInfoIsSet){
        [_str appendFormat:@"%@%@%@", _comma, [CSL genJSONTag:@"playerInfo"], [playerInfo toJSON]];
        _comma = @",";
    }

    [_str appendString:@"}"];

    return [NSString stringWithString:_str];
}

- (NSString *)serialise
{
    return [self serialiseWithPrefix:@""];
}

- (NSString *)serialiseWithPrefix:(NSString *)prefix
{
    NSMutableString *_str = [[NSMutableString alloc] init];

    if(playerInfoIsSet){
        [_str appendString:[playerInfo serialiseWithPrefix:[NSString stringWithFormat:@"%@%s.", prefix, "1"]]];
    }

    return [NSString stringWithString:_str];
}

- (TapTelegraph_startGame_reqArg *)init
{
    return [self initWithIsSet:YES];
}

- (id)initWithIsSet:(BOOL)defIsSet
{
    if((self = [super init]) != nil){
        playerInfo = [[PlayerInfo alloc] initWithIsSet:defIsSet];
        playerInfoIsSet = defIsSet;
    }

    return self;

}

@end
@implementation TapTelegraph_startGame_rspArg

#ifdef GOLGI_STRUCT_NAME
#undef GOLGI_STRUCT_NAME
#endif
#define GOLGI_STRUCT_NAME @"TapTelegraph_startGame_rspArg"

@synthesize internalSuccess_IsSet;
- (NSInteger)getInternalSuccess_
{
    return internalSuccess_;
}

- (void)setInternalSuccess_:(NSInteger )_internalSuccess_
{
    internalSuccess_ = _internalSuccess_;
    internalSuccess_IsSet = YES;
}

@synthesize golgiExceptionIsSet;
- (GolgiException *)getGolgiException
{
    return golgiException;
}

- (void)setGolgiException:(GolgiException *)_golgiException
{
    golgiException = _golgiException;
    golgiExceptionIsSet = (_golgiException != nil) ? YES : NO;
}


+ (TapTelegraph_startGame_rspArg *)deserialiseFromString: (NSString *)string
{
    return [TapTelegraph_startGame_rspArg deserialiseFromPayload:[GolgiPayload payloadWithString:string]];
}

+ (TapTelegraph_startGame_rspArg *)deserialiseFromPayload: (GolgiPayload *)payload
{
    TapTelegraph_startGame_rspArg *inst = [[TapTelegraph_startGame_rspArg alloc] initWithIsSet:NO];
    BOOL corrupt = NO;

    {
        NSNumber *num;
        if((num = [payload getIntWithTag:@"1:"]) != nil){
            inst.internalSuccess_ = [num intValue];
        }
    }

    {
        GolgiPayload *nestedPayload;
        if((nestedPayload = [payload getNestedWithTag:@"3"]) != nil){
            [inst setGolgiException:[GolgiException deserialiseFromPayload:nestedPayload]];
        }
        else{
            [inst setGolgiException:nil];
        }
    }

    return (corrupt) ? nil : inst;
}

+ (TapTelegraph_startGame_rspArg *)fromJSONString:(NSString *)jsonString
{
    GolgiJSONError *_localErr;
    return [TapTelegraph_startGame_rspArg fromJSONString:jsonString error:&_localErr];
}

+ (TapTelegraph_startGame_rspArg *)fromJSONString:(NSString *)jsonString error:(GolgiJSONError **)err
{
    GolgiJSONObject *gjo = [GolgiJSONObject createFromString:jsonString error:err];
    if(gjo == nil){
        if(*err == nil){
            *err = [GolgiJSONError createWithErrType:GOLGI_ERRTYPE_MALFORMED_JSON andErrText:@"Malformed JSON"];
        }
        else if((*err).errType < 0){
            *err = [GolgiJSONError createWithErrType:GOLGI_ERRTYPE_MALFORMED_JSON andErrText:(*err).errText];
        }
        return nil;
    }
    else{
        return [TapTelegraph_startGame_rspArg fromJSONObject:gjo error:err];
    }
}

+ (TapTelegraph_startGame_rspArg *)fromJSONObject:(GolgiJSONObject *)jsonObj
{
    GolgiJSONError *_localErr;
    return [TapTelegraph_startGame_rspArg fromJSONObject:jsonObj error:&_localErr];
}

+ (TapTelegraph_startGame_rspArg *)fromJSONObject:(GolgiJSONObject *)jsonObj error:(GolgiJSONError **)_err
{
    *_err = nil;
    if(jsonObj == nil) return nil;
    TapTelegraph_startGame_rspArg *inst = [[TapTelegraph_startGame_rspArg alloc] initWithIsSet:NO];
    BOOL corrupt = NO;

    if(!corrupt){
        NSNumber *num;
        if((num = [jsonObj getIntegerWithKey:@"internalSuccess_" error:_err]) != nil){
            inst.internalSuccess_ = num.intValue;
        }
        else if(*_err != nil){
            corrupt = YES;
            [*_err appendErrText:[NSString stringWithFormat:@"\nWhile decoding 'internalSuccess_' in '%@'", GOLGI_STRUCT_NAME]];
        }
    }
    if(!corrupt){
        GolgiJSONObject *obj = nil;
        GolgiException *_objInst = nil;
        if((obj = [jsonObj getObjectWithKey:@"golgiException" error:_err]) != nil){
            if((_objInst = [GolgiException fromJSONObject:obj error:_err]) == nil){
                corrupt = YES;
                [*_err appendErrText:[NSString stringWithFormat:@"\nWhile decoding 'golgiException' in '%@'", GOLGI_STRUCT_NAME]];
            }
        }
        else if(*_err != nil){
            corrupt = YES;
            [*_err appendErrText:[NSString stringWithFormat:@"\nWhile decoding 'golgiException' in '%@'", GOLGI_STRUCT_NAME]];
        }
        if(_objInst != nil){
            inst.golgiException = _objInst;
        }
    }

    return (corrupt) ? nil : inst;
}

- (NSString *)toJSON
{
    NSMutableString *_str = [[NSMutableString alloc] init];
    NSString *_comma = @"";

    [_str appendString:@"{"];

    if(internalSuccess_IsSet){
        [_str appendFormat:@"%@%@%ld", _comma, [CSL genJSONTag:@"internalSuccess_"], (long)internalSuccess_];
        _comma = @",";
    }
    if(golgiExceptionIsSet){
        [_str appendFormat:@"%@%@%@", _comma, [CSL genJSONTag:@"golgiException"], [golgiException toJSON]];
        _comma = @",";
    }

    [_str appendString:@"}"];

    return [NSString stringWithString:_str];
}

- (NSString *)serialise
{
    return [self serialiseWithPrefix:@""];
}

- (NSString *)serialiseWithPrefix:(NSString *)prefix
{
    NSMutableString *_str = [[NSMutableString alloc] init];

    if(internalSuccess_IsSet){
        [_str appendFormat:@"%@1: %ld\n", prefix, (long)internalSuccess_];
    }
    if(golgiExceptionIsSet){
        [_str appendString:[golgiException serialiseWithPrefix:[NSString stringWithFormat:@"%@%s.", prefix, "3"]]];
    }

    return [NSString stringWithString:_str];
}

- (TapTelegraph_startGame_rspArg *)init
{
    return [self initWithIsSet:YES];
}

- (id)initWithIsSet:(BOOL)defIsSet
{
    if((self = [super init]) != nil){
        golgiException = [[GolgiException alloc] initWithIsSet:defIsSet];
    }

    return self;

}

@end
@implementation TapTelegraph_sendTap_reqArg

#ifdef GOLGI_STRUCT_NAME
#undef GOLGI_STRUCT_NAME
#endif
#define GOLGI_STRUCT_NAME @"TapTelegraph_sendTap_reqArg"

@synthesize tapDataIsSet;
- (TapData *)getTapData
{
    return tapData;
}

- (void)setTapData:(TapData *)_tapData
{
    tapData = _tapData;
    tapDataIsSet = (_tapData != nil) ? YES : NO;
}


+ (TapTelegraph_sendTap_reqArg *)deserialiseFromString: (NSString *)string
{
    return [TapTelegraph_sendTap_reqArg deserialiseFromPayload:[GolgiPayload payloadWithString:string]];
}

+ (TapTelegraph_sendTap_reqArg *)deserialiseFromPayload: (GolgiPayload *)payload
{
    TapTelegraph_sendTap_reqArg *inst = [[TapTelegraph_sendTap_reqArg alloc] initWithIsSet:NO];
    BOOL corrupt = NO;

    {
        GolgiPayload *nestedPayload;
        if((nestedPayload = [payload getNestedWithTag:@"1"]) != nil){
            [inst setTapData:[TapData deserialiseFromPayload:nestedPayload]];
        }
        else{
            [inst setTapData:nil];
        }
    }
    if([inst getTapData] == nil){
        corrupt = YES;
    }

    return (corrupt) ? nil : inst;
}

+ (TapTelegraph_sendTap_reqArg *)fromJSONString:(NSString *)jsonString
{
    GolgiJSONError *_localErr;
    return [TapTelegraph_sendTap_reqArg fromJSONString:jsonString error:&_localErr];
}

+ (TapTelegraph_sendTap_reqArg *)fromJSONString:(NSString *)jsonString error:(GolgiJSONError **)err
{
    GolgiJSONObject *gjo = [GolgiJSONObject createFromString:jsonString error:err];
    if(gjo == nil){
        if(*err == nil){
            *err = [GolgiJSONError createWithErrType:GOLGI_ERRTYPE_MALFORMED_JSON andErrText:@"Malformed JSON"];
        }
        else if((*err).errType < 0){
            *err = [GolgiJSONError createWithErrType:GOLGI_ERRTYPE_MALFORMED_JSON andErrText:(*err).errText];
        }
        return nil;
    }
    else{
        return [TapTelegraph_sendTap_reqArg fromJSONObject:gjo error:err];
    }
}

+ (TapTelegraph_sendTap_reqArg *)fromJSONObject:(GolgiJSONObject *)jsonObj
{
    GolgiJSONError *_localErr;
    return [TapTelegraph_sendTap_reqArg fromJSONObject:jsonObj error:&_localErr];
}

+ (TapTelegraph_sendTap_reqArg *)fromJSONObject:(GolgiJSONObject *)jsonObj error:(GolgiJSONError **)_err
{
    *_err = nil;
    if(jsonObj == nil) return nil;
    TapTelegraph_sendTap_reqArg *inst = [[TapTelegraph_sendTap_reqArg alloc] initWithIsSet:NO];
    BOOL corrupt = NO;

    if(!corrupt){
        GolgiJSONObject *obj = nil;
        TapData *_objInst = nil;
        if((obj = [jsonObj getObjectWithKey:@"tapData" error:_err]) != nil){
            if((_objInst = [TapData fromJSONObject:obj error:_err]) == nil){
                corrupt = YES;
                [*_err appendErrText:[NSString stringWithFormat:@"\nWhile decoding 'tapData' in '%@'", GOLGI_STRUCT_NAME]];
            }
        }
        else if(*_err != nil){
            corrupt = YES;
            [*_err appendErrText:[NSString stringWithFormat:@"\nWhile decoding 'tapData' in '%@'", GOLGI_STRUCT_NAME]];
        }
        if(_objInst != nil){
            inst.tapData = _objInst;
        }
        else if(*_err == nil && !corrupt){
            corrupt = YES;
            *_err = [GolgiJSONError createWithErrType:-1 andErrText:[NSString stringWithFormat:@"Missing mandatory field 'tapData' in '%@'", GOLGI_STRUCT_NAME]];
        }
    }

    return (corrupt) ? nil : inst;
}

- (NSString *)toJSON
{
    NSMutableString *_str = [[NSMutableString alloc] init];
    NSString *_comma = @"";

    [_str appendString:@"{"];

    if(tapDataIsSet){
        [_str appendFormat:@"%@%@%@", _comma, [CSL genJSONTag:@"tapData"], [tapData toJSON]];
        _comma = @",";
    }

    [_str appendString:@"}"];

    return [NSString stringWithString:_str];
}

- (NSString *)serialise
{
    return [self serialiseWithPrefix:@""];
}

- (NSString *)serialiseWithPrefix:(NSString *)prefix
{
    NSMutableString *_str = [[NSMutableString alloc] init];

    if(tapDataIsSet){
        [_str appendString:[tapData serialiseWithPrefix:[NSString stringWithFormat:@"%@%s.", prefix, "1"]]];
    }

    return [NSString stringWithString:_str];
}

- (TapTelegraph_sendTap_reqArg *)init
{
    return [self initWithIsSet:YES];
}

- (id)initWithIsSet:(BOOL)defIsSet
{
    if((self = [super init]) != nil){
        tapData = [[TapData alloc] initWithIsSet:defIsSet];
        tapDataIsSet = defIsSet;
    }

    return self;

}

@end
@implementation TapTelegraph_sendTap_rspArg

#ifdef GOLGI_STRUCT_NAME
#undef GOLGI_STRUCT_NAME
#endif
#define GOLGI_STRUCT_NAME @"TapTelegraph_sendTap_rspArg"

@synthesize internalSuccess_IsSet;
- (NSInteger)getInternalSuccess_
{
    return internalSuccess_;
}

- (void)setInternalSuccess_:(NSInteger )_internalSuccess_
{
    internalSuccess_ = _internalSuccess_;
    internalSuccess_IsSet = YES;
}

@synthesize golgiExceptionIsSet;
- (GolgiException *)getGolgiException
{
    return golgiException;
}

- (void)setGolgiException:(GolgiException *)_golgiException
{
    golgiException = _golgiException;
    golgiExceptionIsSet = (_golgiException != nil) ? YES : NO;
}


+ (TapTelegraph_sendTap_rspArg *)deserialiseFromString: (NSString *)string
{
    return [TapTelegraph_sendTap_rspArg deserialiseFromPayload:[GolgiPayload payloadWithString:string]];
}

+ (TapTelegraph_sendTap_rspArg *)deserialiseFromPayload: (GolgiPayload *)payload
{
    TapTelegraph_sendTap_rspArg *inst = [[TapTelegraph_sendTap_rspArg alloc] initWithIsSet:NO];
    BOOL corrupt = NO;

    {
        NSNumber *num;
        if((num = [payload getIntWithTag:@"1:"]) != nil){
            inst.internalSuccess_ = [num intValue];
        }
    }

    {
        GolgiPayload *nestedPayload;
        if((nestedPayload = [payload getNestedWithTag:@"3"]) != nil){
            [inst setGolgiException:[GolgiException deserialiseFromPayload:nestedPayload]];
        }
        else{
            [inst setGolgiException:nil];
        }
    }

    return (corrupt) ? nil : inst;
}

+ (TapTelegraph_sendTap_rspArg *)fromJSONString:(NSString *)jsonString
{
    GolgiJSONError *_localErr;
    return [TapTelegraph_sendTap_rspArg fromJSONString:jsonString error:&_localErr];
}

+ (TapTelegraph_sendTap_rspArg *)fromJSONString:(NSString *)jsonString error:(GolgiJSONError **)err
{
    GolgiJSONObject *gjo = [GolgiJSONObject createFromString:jsonString error:err];
    if(gjo == nil){
        if(*err == nil){
            *err = [GolgiJSONError createWithErrType:GOLGI_ERRTYPE_MALFORMED_JSON andErrText:@"Malformed JSON"];
        }
        else if((*err).errType < 0){
            *err = [GolgiJSONError createWithErrType:GOLGI_ERRTYPE_MALFORMED_JSON andErrText:(*err).errText];
        }
        return nil;
    }
    else{
        return [TapTelegraph_sendTap_rspArg fromJSONObject:gjo error:err];
    }
}

+ (TapTelegraph_sendTap_rspArg *)fromJSONObject:(GolgiJSONObject *)jsonObj
{
    GolgiJSONError *_localErr;
    return [TapTelegraph_sendTap_rspArg fromJSONObject:jsonObj error:&_localErr];
}

+ (TapTelegraph_sendTap_rspArg *)fromJSONObject:(GolgiJSONObject *)jsonObj error:(GolgiJSONError **)_err
{
    *_err = nil;
    if(jsonObj == nil) return nil;
    TapTelegraph_sendTap_rspArg *inst = [[TapTelegraph_sendTap_rspArg alloc] initWithIsSet:NO];
    BOOL corrupt = NO;

    if(!corrupt){
        NSNumber *num;
        if((num = [jsonObj getIntegerWithKey:@"internalSuccess_" error:_err]) != nil){
            inst.internalSuccess_ = num.intValue;
        }
        else if(*_err != nil){
            corrupt = YES;
            [*_err appendErrText:[NSString stringWithFormat:@"\nWhile decoding 'internalSuccess_' in '%@'", GOLGI_STRUCT_NAME]];
        }
    }
    if(!corrupt){
        GolgiJSONObject *obj = nil;
        GolgiException *_objInst = nil;
        if((obj = [jsonObj getObjectWithKey:@"golgiException" error:_err]) != nil){
            if((_objInst = [GolgiException fromJSONObject:obj error:_err]) == nil){
                corrupt = YES;
                [*_err appendErrText:[NSString stringWithFormat:@"\nWhile decoding 'golgiException' in '%@'", GOLGI_STRUCT_NAME]];
            }
        }
        else if(*_err != nil){
            corrupt = YES;
            [*_err appendErrText:[NSString stringWithFormat:@"\nWhile decoding 'golgiException' in '%@'", GOLGI_STRUCT_NAME]];
        }
        if(_objInst != nil){
            inst.golgiException = _objInst;
        }
    }

    return (corrupt) ? nil : inst;
}

- (NSString *)toJSON
{
    NSMutableString *_str = [[NSMutableString alloc] init];
    NSString *_comma = @"";

    [_str appendString:@"{"];

    if(internalSuccess_IsSet){
        [_str appendFormat:@"%@%@%ld", _comma, [CSL genJSONTag:@"internalSuccess_"], (long)internalSuccess_];
        _comma = @",";
    }
    if(golgiExceptionIsSet){
        [_str appendFormat:@"%@%@%@", _comma, [CSL genJSONTag:@"golgiException"], [golgiException toJSON]];
        _comma = @",";
    }

    [_str appendString:@"}"];

    return [NSString stringWithString:_str];
}

- (NSString *)serialise
{
    return [self serialiseWithPrefix:@""];
}

- (NSString *)serialiseWithPrefix:(NSString *)prefix
{
    NSMutableString *_str = [[NSMutableString alloc] init];

    if(internalSuccess_IsSet){
        [_str appendFormat:@"%@1: %ld\n", prefix, (long)internalSuccess_];
    }
    if(golgiExceptionIsSet){
        [_str appendString:[golgiException serialiseWithPrefix:[NSString stringWithFormat:@"%@%s.", prefix, "3"]]];
    }

    return [NSString stringWithString:_str];
}

- (TapTelegraph_sendTap_rspArg *)init
{
    return [self initWithIsSet:YES];
}

- (id)initWithIsSet:(BOOL)defIsSet
{
    if((self = [super init]) != nil){
        golgiException = [[GolgiException alloc] initWithIsSet:defIsSet];
    }

    return self;

}

@end
@implementation TapTelegraph_gameOver_reqArg

#ifdef GOLGI_STRUCT_NAME
#undef GOLGI_STRUCT_NAME
#endif
#define GOLGI_STRUCT_NAME @"TapTelegraph_gameOver_reqArg"

@synthesize gameOverDataIsSet;
- (GameOverData *)getGameOverData
{
    return gameOverData;
}

- (void)setGameOverData:(GameOverData *)_gameOverData
{
    gameOverData = _gameOverData;
    gameOverDataIsSet = (_gameOverData != nil) ? YES : NO;
}


+ (TapTelegraph_gameOver_reqArg *)deserialiseFromString: (NSString *)string
{
    return [TapTelegraph_gameOver_reqArg deserialiseFromPayload:[GolgiPayload payloadWithString:string]];
}

+ (TapTelegraph_gameOver_reqArg *)deserialiseFromPayload: (GolgiPayload *)payload
{
    TapTelegraph_gameOver_reqArg *inst = [[TapTelegraph_gameOver_reqArg alloc] initWithIsSet:NO];
    BOOL corrupt = NO;

    {
        GolgiPayload *nestedPayload;
        if((nestedPayload = [payload getNestedWithTag:@"1"]) != nil){
            [inst setGameOverData:[GameOverData deserialiseFromPayload:nestedPayload]];
        }
        else{
            [inst setGameOverData:nil];
        }
    }
    if([inst getGameOverData] == nil){
        corrupt = YES;
    }

    return (corrupt) ? nil : inst;
}

+ (TapTelegraph_gameOver_reqArg *)fromJSONString:(NSString *)jsonString
{
    GolgiJSONError *_localErr;
    return [TapTelegraph_gameOver_reqArg fromJSONString:jsonString error:&_localErr];
}

+ (TapTelegraph_gameOver_reqArg *)fromJSONString:(NSString *)jsonString error:(GolgiJSONError **)err
{
    GolgiJSONObject *gjo = [GolgiJSONObject createFromString:jsonString error:err];
    if(gjo == nil){
        if(*err == nil){
            *err = [GolgiJSONError createWithErrType:GOLGI_ERRTYPE_MALFORMED_JSON andErrText:@"Malformed JSON"];
        }
        else if((*err).errType < 0){
            *err = [GolgiJSONError createWithErrType:GOLGI_ERRTYPE_MALFORMED_JSON andErrText:(*err).errText];
        }
        return nil;
    }
    else{
        return [TapTelegraph_gameOver_reqArg fromJSONObject:gjo error:err];
    }
}

+ (TapTelegraph_gameOver_reqArg *)fromJSONObject:(GolgiJSONObject *)jsonObj
{
    GolgiJSONError *_localErr;
    return [TapTelegraph_gameOver_reqArg fromJSONObject:jsonObj error:&_localErr];
}

+ (TapTelegraph_gameOver_reqArg *)fromJSONObject:(GolgiJSONObject *)jsonObj error:(GolgiJSONError **)_err
{
    *_err = nil;
    if(jsonObj == nil) return nil;
    TapTelegraph_gameOver_reqArg *inst = [[TapTelegraph_gameOver_reqArg alloc] initWithIsSet:NO];
    BOOL corrupt = NO;

    if(!corrupt){
        GolgiJSONObject *obj = nil;
        GameOverData *_objInst = nil;
        if((obj = [jsonObj getObjectWithKey:@"gameOverData" error:_err]) != nil){
            if((_objInst = [GameOverData fromJSONObject:obj error:_err]) == nil){
                corrupt = YES;
                [*_err appendErrText:[NSString stringWithFormat:@"\nWhile decoding 'gameOverData' in '%@'", GOLGI_STRUCT_NAME]];
            }
        }
        else if(*_err != nil){
            corrupt = YES;
            [*_err appendErrText:[NSString stringWithFormat:@"\nWhile decoding 'gameOverData' in '%@'", GOLGI_STRUCT_NAME]];
        }
        if(_objInst != nil){
            inst.gameOverData = _objInst;
        }
        else if(*_err == nil && !corrupt){
            corrupt = YES;
            *_err = [GolgiJSONError createWithErrType:-1 andErrText:[NSString stringWithFormat:@"Missing mandatory field 'gameOverData' in '%@'", GOLGI_STRUCT_NAME]];
        }
    }

    return (corrupt) ? nil : inst;
}

- (NSString *)toJSON
{
    NSMutableString *_str = [[NSMutableString alloc] init];
    NSString *_comma = @"";

    [_str appendString:@"{"];

    if(gameOverDataIsSet){
        [_str appendFormat:@"%@%@%@", _comma, [CSL genJSONTag:@"gameOverData"], [gameOverData toJSON]];
        _comma = @",";
    }

    [_str appendString:@"}"];

    return [NSString stringWithString:_str];
}

- (NSString *)serialise
{
    return [self serialiseWithPrefix:@""];
}

- (NSString *)serialiseWithPrefix:(NSString *)prefix
{
    NSMutableString *_str = [[NSMutableString alloc] init];

    if(gameOverDataIsSet){
        [_str appendString:[gameOverData serialiseWithPrefix:[NSString stringWithFormat:@"%@%s.", prefix, "1"]]];
    }

    return [NSString stringWithString:_str];
}

- (TapTelegraph_gameOver_reqArg *)init
{
    return [self initWithIsSet:YES];
}

- (id)initWithIsSet:(BOOL)defIsSet
{
    if((self = [super init]) != nil){
        gameOverData = [[GameOverData alloc] initWithIsSet:defIsSet];
        gameOverDataIsSet = defIsSet;
    }

    return self;

}

@end
@implementation TapTelegraph_gameOver_rspArg

#ifdef GOLGI_STRUCT_NAME
#undef GOLGI_STRUCT_NAME
#endif
#define GOLGI_STRUCT_NAME @"TapTelegraph_gameOver_rspArg"

@synthesize internalSuccess_IsSet;
- (NSInteger)getInternalSuccess_
{
    return internalSuccess_;
}

- (void)setInternalSuccess_:(NSInteger )_internalSuccess_
{
    internalSuccess_ = _internalSuccess_;
    internalSuccess_IsSet = YES;
}

@synthesize golgiExceptionIsSet;
- (GolgiException *)getGolgiException
{
    return golgiException;
}

- (void)setGolgiException:(GolgiException *)_golgiException
{
    golgiException = _golgiException;
    golgiExceptionIsSet = (_golgiException != nil) ? YES : NO;
}


+ (TapTelegraph_gameOver_rspArg *)deserialiseFromString: (NSString *)string
{
    return [TapTelegraph_gameOver_rspArg deserialiseFromPayload:[GolgiPayload payloadWithString:string]];
}

+ (TapTelegraph_gameOver_rspArg *)deserialiseFromPayload: (GolgiPayload *)payload
{
    TapTelegraph_gameOver_rspArg *inst = [[TapTelegraph_gameOver_rspArg alloc] initWithIsSet:NO];
    BOOL corrupt = NO;

    {
        NSNumber *num;
        if((num = [payload getIntWithTag:@"1:"]) != nil){
            inst.internalSuccess_ = [num intValue];
        }
    }

    {
        GolgiPayload *nestedPayload;
        if((nestedPayload = [payload getNestedWithTag:@"3"]) != nil){
            [inst setGolgiException:[GolgiException deserialiseFromPayload:nestedPayload]];
        }
        else{
            [inst setGolgiException:nil];
        }
    }

    return (corrupt) ? nil : inst;
}

+ (TapTelegraph_gameOver_rspArg *)fromJSONString:(NSString *)jsonString
{
    GolgiJSONError *_localErr;
    return [TapTelegraph_gameOver_rspArg fromJSONString:jsonString error:&_localErr];
}

+ (TapTelegraph_gameOver_rspArg *)fromJSONString:(NSString *)jsonString error:(GolgiJSONError **)err
{
    GolgiJSONObject *gjo = [GolgiJSONObject createFromString:jsonString error:err];
    if(gjo == nil){
        if(*err == nil){
            *err = [GolgiJSONError createWithErrType:GOLGI_ERRTYPE_MALFORMED_JSON andErrText:@"Malformed JSON"];
        }
        else if((*err).errType < 0){
            *err = [GolgiJSONError createWithErrType:GOLGI_ERRTYPE_MALFORMED_JSON andErrText:(*err).errText];
        }
        return nil;
    }
    else{
        return [TapTelegraph_gameOver_rspArg fromJSONObject:gjo error:err];
    }
}

+ (TapTelegraph_gameOver_rspArg *)fromJSONObject:(GolgiJSONObject *)jsonObj
{
    GolgiJSONError *_localErr;
    return [TapTelegraph_gameOver_rspArg fromJSONObject:jsonObj error:&_localErr];
}

+ (TapTelegraph_gameOver_rspArg *)fromJSONObject:(GolgiJSONObject *)jsonObj error:(GolgiJSONError **)_err
{
    *_err = nil;
    if(jsonObj == nil) return nil;
    TapTelegraph_gameOver_rspArg *inst = [[TapTelegraph_gameOver_rspArg alloc] initWithIsSet:NO];
    BOOL corrupt = NO;

    if(!corrupt){
        NSNumber *num;
        if((num = [jsonObj getIntegerWithKey:@"internalSuccess_" error:_err]) != nil){
            inst.internalSuccess_ = num.intValue;
        }
        else if(*_err != nil){
            corrupt = YES;
            [*_err appendErrText:[NSString stringWithFormat:@"\nWhile decoding 'internalSuccess_' in '%@'", GOLGI_STRUCT_NAME]];
        }
    }
    if(!corrupt){
        GolgiJSONObject *obj = nil;
        GolgiException *_objInst = nil;
        if((obj = [jsonObj getObjectWithKey:@"golgiException" error:_err]) != nil){
            if((_objInst = [GolgiException fromJSONObject:obj error:_err]) == nil){
                corrupt = YES;
                [*_err appendErrText:[NSString stringWithFormat:@"\nWhile decoding 'golgiException' in '%@'", GOLGI_STRUCT_NAME]];
            }
        }
        else if(*_err != nil){
            corrupt = YES;
            [*_err appendErrText:[NSString stringWithFormat:@"\nWhile decoding 'golgiException' in '%@'", GOLGI_STRUCT_NAME]];
        }
        if(_objInst != nil){
            inst.golgiException = _objInst;
        }
    }

    return (corrupt) ? nil : inst;
}

- (NSString *)toJSON
{
    NSMutableString *_str = [[NSMutableString alloc] init];
    NSString *_comma = @"";

    [_str appendString:@"{"];

    if(internalSuccess_IsSet){
        [_str appendFormat:@"%@%@%ld", _comma, [CSL genJSONTag:@"internalSuccess_"], (long)internalSuccess_];
        _comma = @",";
    }
    if(golgiExceptionIsSet){
        [_str appendFormat:@"%@%@%@", _comma, [CSL genJSONTag:@"golgiException"], [golgiException toJSON]];
        _comma = @",";
    }

    [_str appendString:@"}"];

    return [NSString stringWithString:_str];
}

- (NSString *)serialise
{
    return [self serialiseWithPrefix:@""];
}

- (NSString *)serialiseWithPrefix:(NSString *)prefix
{
    NSMutableString *_str = [[NSMutableString alloc] init];

    if(internalSuccess_IsSet){
        [_str appendFormat:@"%@1: %ld\n", prefix, (long)internalSuccess_];
    }
    if(golgiExceptionIsSet){
        [_str appendString:[golgiException serialiseWithPrefix:[NSString stringWithFormat:@"%@%s.", prefix, "3"]]];
    }

    return [NSString stringWithString:_str];
}

- (TapTelegraph_gameOver_rspArg *)init
{
    return [self initWithIsSet:YES];
}

- (id)initWithIsSet:(BOOL)defIsSet
{
    if((self = [super init]) != nil){
        golgiException = [[GolgiException alloc] initWithIsSet:defIsSet];
    }

    return self;

}

@end
@implementation TapTelegraph_streamGame_reqArg

#ifdef GOLGI_STRUCT_NAME
#undef GOLGI_STRUCT_NAME
#endif
#define GOLGI_STRUCT_NAME @"TapTelegraph_streamGame_reqArg"

@synthesize golgiIdIsSet;
- (NSString *)getGolgiId
{
    return golgiId;
}

- (void)setGolgiId:(NSString *)_golgiId
{
    golgiId = _golgiId;
    golgiIdIsSet = (_golgiId != nil) ? YES : NO;
}


+ (TapTelegraph_streamGame_reqArg *)deserialiseFromString: (NSString *)string
{
    return [TapTelegraph_streamGame_reqArg deserialiseFromPayload:[GolgiPayload payloadWithString:string]];
}

+ (TapTelegraph_streamGame_reqArg *)deserialiseFromPayload: (GolgiPayload *)payload
{
    TapTelegraph_streamGame_reqArg *inst = [[TapTelegraph_streamGame_reqArg alloc] initWithIsSet:NO];
    BOOL corrupt = NO;

    {
        NSString *str;
        if((str = [payload getStringWithTag:@"1:"]) != nil){
            [inst setGolgiId:str];
        }
        else{
            corrupt = YES;
        }
    }

    return (corrupt) ? nil : inst;
}

+ (TapTelegraph_streamGame_reqArg *)fromJSONString:(NSString *)jsonString
{
    GolgiJSONError *_localErr;
    return [TapTelegraph_streamGame_reqArg fromJSONString:jsonString error:&_localErr];
}

+ (TapTelegraph_streamGame_reqArg *)fromJSONString:(NSString *)jsonString error:(GolgiJSONError **)err
{
    GolgiJSONObject *gjo = [GolgiJSONObject createFromString:jsonString error:err];
    if(gjo == nil){
        if(*err == nil){
            *err = [GolgiJSONError createWithErrType:GOLGI_ERRTYPE_MALFORMED_JSON andErrText:@"Malformed JSON"];
        }
        else if((*err).errType < 0){
            *err = [GolgiJSONError createWithErrType:GOLGI_ERRTYPE_MALFORMED_JSON andErrText:(*err).errText];
        }
        return nil;
    }
    else{
        return [TapTelegraph_streamGame_reqArg fromJSONObject:gjo error:err];
    }
}

+ (TapTelegraph_streamGame_reqArg *)fromJSONObject:(GolgiJSONObject *)jsonObj
{
    GolgiJSONError *_localErr;
    return [TapTelegraph_streamGame_reqArg fromJSONObject:jsonObj error:&_localErr];
}

+ (TapTelegraph_streamGame_reqArg *)fromJSONObject:(GolgiJSONObject *)jsonObj error:(GolgiJSONError **)_err
{
    *_err = nil;
    if(jsonObj == nil) return nil;
    TapTelegraph_streamGame_reqArg *inst = [[TapTelegraph_streamGame_reqArg alloc] initWithIsSet:NO];
    BOOL corrupt = NO;

    if(!corrupt){
        NSString *str;
        if((str = [jsonObj getStringWithKey:@"golgiId" error:_err]) != nil){
            [inst setGolgiId:str];
        }
        else if(*_err != nil){
            corrupt = YES;
            [*_err appendErrText:[NSString stringWithFormat:@"\nWhile decoding 'golgiId' in '%@'", GOLGI_STRUCT_NAME]];
        }
        else{
            corrupt = YES;
            *_err = [GolgiJSONError createWithErrType:-1 andErrText:[NSString stringWithFormat:@"Missing mandatory field 'golgiId' in '%@'", GOLGI_STRUCT_NAME]];
        }
    }

    return (corrupt) ? nil : inst;
}

- (NSString *)toJSON
{
    NSMutableString *_str = [[NSMutableString alloc] init];
    NSString *_comma = @"";

    [_str appendString:@"{"];

    if(golgiIdIsSet){
        [_str appendFormat:@"%@%@%@", _comma, [CSL genJSONTag:@"golgiId"], [CSL encodeJSString:golgiId]];
        _comma = @",";
    }

    [_str appendString:@"}"];

    return [NSString stringWithString:_str];
}

- (NSString *)serialise
{
    return [self serialiseWithPrefix:@""];
}

- (NSString *)serialiseWithPrefix:(NSString *)prefix
{
    NSMutableString *_str = [[NSMutableString alloc] init];

    if(golgiIdIsSet){
        [_str appendFormat:@"%@1: \"%@\"\n", prefix, [CSL  NTLEscapeString:golgiId]];
    }

    return [NSString stringWithString:_str];
}

- (TapTelegraph_streamGame_reqArg *)init
{
    return [self initWithIsSet:YES];
}

- (id)initWithIsSet:(BOOL)defIsSet
{
    if((self = [super init]) != nil){
        golgiId = @"";
        golgiIdIsSet = defIsSet;
    }

    return self;

}

@end
@implementation TapTelegraph_streamGame_rspArg

#ifdef GOLGI_STRUCT_NAME
#undef GOLGI_STRUCT_NAME
#endif
#define GOLGI_STRUCT_NAME @"TapTelegraph_streamGame_rspArg"

@synthesize internalSuccess_IsSet;
- (NSInteger)getInternalSuccess_
{
    return internalSuccess_;
}

- (void)setInternalSuccess_:(NSInteger )_internalSuccess_
{
    internalSuccess_ = _internalSuccess_;
    internalSuccess_IsSet = YES;
}

@synthesize golgiExceptionIsSet;
- (GolgiException *)getGolgiException
{
    return golgiException;
}

- (void)setGolgiException:(GolgiException *)_golgiException
{
    golgiException = _golgiException;
    golgiExceptionIsSet = (_golgiException != nil) ? YES : NO;
}


+ (TapTelegraph_streamGame_rspArg *)deserialiseFromString: (NSString *)string
{
    return [TapTelegraph_streamGame_rspArg deserialiseFromPayload:[GolgiPayload payloadWithString:string]];
}

+ (TapTelegraph_streamGame_rspArg *)deserialiseFromPayload: (GolgiPayload *)payload
{
    TapTelegraph_streamGame_rspArg *inst = [[TapTelegraph_streamGame_rspArg alloc] initWithIsSet:NO];
    BOOL corrupt = NO;

    {
        NSNumber *num;
        if((num = [payload getIntWithTag:@"1:"]) != nil){
            inst.internalSuccess_ = [num intValue];
        }
    }

    {
        GolgiPayload *nestedPayload;
        if((nestedPayload = [payload getNestedWithTag:@"3"]) != nil){
            [inst setGolgiException:[GolgiException deserialiseFromPayload:nestedPayload]];
        }
        else{
            [inst setGolgiException:nil];
        }
    }

    return (corrupt) ? nil : inst;
}

+ (TapTelegraph_streamGame_rspArg *)fromJSONString:(NSString *)jsonString
{
    GolgiJSONError *_localErr;
    return [TapTelegraph_streamGame_rspArg fromJSONString:jsonString error:&_localErr];
}

+ (TapTelegraph_streamGame_rspArg *)fromJSONString:(NSString *)jsonString error:(GolgiJSONError **)err
{
    GolgiJSONObject *gjo = [GolgiJSONObject createFromString:jsonString error:err];
    if(gjo == nil){
        if(*err == nil){
            *err = [GolgiJSONError createWithErrType:GOLGI_ERRTYPE_MALFORMED_JSON andErrText:@"Malformed JSON"];
        }
        else if((*err).errType < 0){
            *err = [GolgiJSONError createWithErrType:GOLGI_ERRTYPE_MALFORMED_JSON andErrText:(*err).errText];
        }
        return nil;
    }
    else{
        return [TapTelegraph_streamGame_rspArg fromJSONObject:gjo error:err];
    }
}

+ (TapTelegraph_streamGame_rspArg *)fromJSONObject:(GolgiJSONObject *)jsonObj
{
    GolgiJSONError *_localErr;
    return [TapTelegraph_streamGame_rspArg fromJSONObject:jsonObj error:&_localErr];
}

+ (TapTelegraph_streamGame_rspArg *)fromJSONObject:(GolgiJSONObject *)jsonObj error:(GolgiJSONError **)_err
{
    *_err = nil;
    if(jsonObj == nil) return nil;
    TapTelegraph_streamGame_rspArg *inst = [[TapTelegraph_streamGame_rspArg alloc] initWithIsSet:NO];
    BOOL corrupt = NO;

    if(!corrupt){
        NSNumber *num;
        if((num = [jsonObj getIntegerWithKey:@"internalSuccess_" error:_err]) != nil){
            inst.internalSuccess_ = num.intValue;
        }
        else if(*_err != nil){
            corrupt = YES;
            [*_err appendErrText:[NSString stringWithFormat:@"\nWhile decoding 'internalSuccess_' in '%@'", GOLGI_STRUCT_NAME]];
        }
    }
    if(!corrupt){
        GolgiJSONObject *obj = nil;
        GolgiException *_objInst = nil;
        if((obj = [jsonObj getObjectWithKey:@"golgiException" error:_err]) != nil){
            if((_objInst = [GolgiException fromJSONObject:obj error:_err]) == nil){
                corrupt = YES;
                [*_err appendErrText:[NSString stringWithFormat:@"\nWhile decoding 'golgiException' in '%@'", GOLGI_STRUCT_NAME]];
            }
        }
        else if(*_err != nil){
            corrupt = YES;
            [*_err appendErrText:[NSString stringWithFormat:@"\nWhile decoding 'golgiException' in '%@'", GOLGI_STRUCT_NAME]];
        }
        if(_objInst != nil){
            inst.golgiException = _objInst;
        }
    }

    return (corrupt) ? nil : inst;
}

- (NSString *)toJSON
{
    NSMutableString *_str = [[NSMutableString alloc] init];
    NSString *_comma = @"";

    [_str appendString:@"{"];

    if(internalSuccess_IsSet){
        [_str appendFormat:@"%@%@%ld", _comma, [CSL genJSONTag:@"internalSuccess_"], (long)internalSuccess_];
        _comma = @",";
    }
    if(golgiExceptionIsSet){
        [_str appendFormat:@"%@%@%@", _comma, [CSL genJSONTag:@"golgiException"], [golgiException toJSON]];
        _comma = @",";
    }

    [_str appendString:@"}"];

    return [NSString stringWithString:_str];
}

- (NSString *)serialise
{
    return [self serialiseWithPrefix:@""];
}

- (NSString *)serialiseWithPrefix:(NSString *)prefix
{
    NSMutableString *_str = [[NSMutableString alloc] init];

    if(internalSuccess_IsSet){
        [_str appendFormat:@"%@1: %ld\n", prefix, (long)internalSuccess_];
    }
    if(golgiExceptionIsSet){
        [_str appendString:[golgiException serialiseWithPrefix:[NSString stringWithFormat:@"%@%s.", prefix, "3"]]];
    }

    return [NSString stringWithString:_str];
}

- (TapTelegraph_streamGame_rspArg *)init
{
    return [self initWithIsSet:YES];
}

- (id)initWithIsSet:(BOOL)defIsSet
{
    if((self = [super init]) != nil){
        golgiException = [[GolgiException alloc] initWithIsSet:defIsSet];
    }

    return self;

}

@end
@implementation TapTelegraph_getHiScore_reqArg

#ifdef GOLGI_STRUCT_NAME
#undef GOLGI_STRUCT_NAME
#endif
#define GOLGI_STRUCT_NAME @"TapTelegraph_getHiScore_reqArg"

@synthesize pookyIsSet;
- (NSInteger)getPooky
{
    return pooky;
}

- (void)setPooky:(NSInteger )_pooky
{
    pooky = _pooky;
    pookyIsSet = YES;
}


+ (TapTelegraph_getHiScore_reqArg *)deserialiseFromString: (NSString *)string
{
    return [TapTelegraph_getHiScore_reqArg deserialiseFromPayload:[GolgiPayload payloadWithString:string]];
}

+ (TapTelegraph_getHiScore_reqArg *)deserialiseFromPayload: (GolgiPayload *)payload
{
    TapTelegraph_getHiScore_reqArg *inst = [[TapTelegraph_getHiScore_reqArg alloc] initWithIsSet:NO];
    BOOL corrupt = NO;

    {
        NSNumber *num;
        if((num = [payload getIntWithTag:@"1:"]) != nil){
            inst.pooky = [num intValue];
        }
        else{
            corrupt = YES;
        }
    }

    return (corrupt) ? nil : inst;
}

+ (TapTelegraph_getHiScore_reqArg *)fromJSONString:(NSString *)jsonString
{
    GolgiJSONError *_localErr;
    return [TapTelegraph_getHiScore_reqArg fromJSONString:jsonString error:&_localErr];
}

+ (TapTelegraph_getHiScore_reqArg *)fromJSONString:(NSString *)jsonString error:(GolgiJSONError **)err
{
    GolgiJSONObject *gjo = [GolgiJSONObject createFromString:jsonString error:err];
    if(gjo == nil){
        if(*err == nil){
            *err = [GolgiJSONError createWithErrType:GOLGI_ERRTYPE_MALFORMED_JSON andErrText:@"Malformed JSON"];
        }
        else if((*err).errType < 0){
            *err = [GolgiJSONError createWithErrType:GOLGI_ERRTYPE_MALFORMED_JSON andErrText:(*err).errText];
        }
        return nil;
    }
    else{
        return [TapTelegraph_getHiScore_reqArg fromJSONObject:gjo error:err];
    }
}

+ (TapTelegraph_getHiScore_reqArg *)fromJSONObject:(GolgiJSONObject *)jsonObj
{
    GolgiJSONError *_localErr;
    return [TapTelegraph_getHiScore_reqArg fromJSONObject:jsonObj error:&_localErr];
}

+ (TapTelegraph_getHiScore_reqArg *)fromJSONObject:(GolgiJSONObject *)jsonObj error:(GolgiJSONError **)_err
{
    *_err = nil;
    if(jsonObj == nil) return nil;
    TapTelegraph_getHiScore_reqArg *inst = [[TapTelegraph_getHiScore_reqArg alloc] initWithIsSet:NO];
    BOOL corrupt = NO;

    if(!corrupt){
        NSNumber *num;
        if((num = [jsonObj getIntegerWithKey:@"pooky" error:_err]) != nil){
            inst.pooky = num.intValue;
        }
        else if(*_err != nil){
            corrupt = YES;
            [*_err appendErrText:[NSString stringWithFormat:@"\nWhile decoding 'pooky' in '%@'", GOLGI_STRUCT_NAME]];
        }
        else{
            corrupt = YES;
            *_err = [GolgiJSONError createWithErrType:-1 andErrText:[NSString stringWithFormat:@"Missing mandatory i32 'pooky' in '%@'", GOLGI_STRUCT_NAME]];
        }
    }

    return (corrupt) ? nil : inst;
}

- (NSString *)toJSON
{
    NSMutableString *_str = [[NSMutableString alloc] init];
    NSString *_comma = @"";

    [_str appendString:@"{"];

    if(pookyIsSet){
        [_str appendFormat:@"%@%@%ld", _comma, [CSL genJSONTag:@"pooky"], (long)pooky];
        _comma = @",";
    }

    [_str appendString:@"}"];

    return [NSString stringWithString:_str];
}

- (NSString *)serialise
{
    return [self serialiseWithPrefix:@""];
}

- (NSString *)serialiseWithPrefix:(NSString *)prefix
{
    NSMutableString *_str = [[NSMutableString alloc] init];

    if(pookyIsSet){
        [_str appendFormat:@"%@1: %ld\n", prefix, (long)pooky];
    }

    return [NSString stringWithString:_str];
}

- (TapTelegraph_getHiScore_reqArg *)init
{
    return [self initWithIsSet:YES];
}

- (id)initWithIsSet:(BOOL)defIsSet
{
    if((self = [super init]) != nil){
        pookyIsSet = defIsSet;
    }

    return self;

}

@end
@implementation TapTelegraph_getHiScore_rspArg

#ifdef GOLGI_STRUCT_NAME
#undef GOLGI_STRUCT_NAME
#endif
#define GOLGI_STRUCT_NAME @"TapTelegraph_getHiScore_rspArg"

@synthesize internalSuccess_IsSet;
- (NSInteger)getInternalSuccess_
{
    return internalSuccess_;
}

- (void)setInternalSuccess_:(NSInteger )_internalSuccess_
{
    internalSuccess_ = _internalSuccess_;
    internalSuccess_IsSet = YES;
}

@synthesize resultIsSet;
- (HiScoreData *)getResult
{
    return result;
}

- (void)setResult:(HiScoreData *)_result
{
    result = _result;
    resultIsSet = (_result != nil) ? YES : NO;
}

@synthesize golgiExceptionIsSet;
- (GolgiException *)getGolgiException
{
    return golgiException;
}

- (void)setGolgiException:(GolgiException *)_golgiException
{
    golgiException = _golgiException;
    golgiExceptionIsSet = (_golgiException != nil) ? YES : NO;
}


+ (TapTelegraph_getHiScore_rspArg *)deserialiseFromString: (NSString *)string
{
    return [TapTelegraph_getHiScore_rspArg deserialiseFromPayload:[GolgiPayload payloadWithString:string]];
}

+ (TapTelegraph_getHiScore_rspArg *)deserialiseFromPayload: (GolgiPayload *)payload
{
    TapTelegraph_getHiScore_rspArg *inst = [[TapTelegraph_getHiScore_rspArg alloc] initWithIsSet:NO];
    BOOL corrupt = NO;

    {
        NSNumber *num;
        if((num = [payload getIntWithTag:@"1:"]) != nil){
            inst.internalSuccess_ = [num intValue];
        }
    }

    {
        GolgiPayload *nestedPayload;
        if((nestedPayload = [payload getNestedWithTag:@"2"]) != nil){
            [inst setResult:[HiScoreData deserialiseFromPayload:nestedPayload]];
        }
        else{
            [inst setResult:nil];
        }
    }

    {
        GolgiPayload *nestedPayload;
        if((nestedPayload = [payload getNestedWithTag:@"3"]) != nil){
            [inst setGolgiException:[GolgiException deserialiseFromPayload:nestedPayload]];
        }
        else{
            [inst setGolgiException:nil];
        }
    }

    return (corrupt) ? nil : inst;
}

+ (TapTelegraph_getHiScore_rspArg *)fromJSONString:(NSString *)jsonString
{
    GolgiJSONError *_localErr;
    return [TapTelegraph_getHiScore_rspArg fromJSONString:jsonString error:&_localErr];
}

+ (TapTelegraph_getHiScore_rspArg *)fromJSONString:(NSString *)jsonString error:(GolgiJSONError **)err
{
    GolgiJSONObject *gjo = [GolgiJSONObject createFromString:jsonString error:err];
    if(gjo == nil){
        if(*err == nil){
            *err = [GolgiJSONError createWithErrType:GOLGI_ERRTYPE_MALFORMED_JSON andErrText:@"Malformed JSON"];
        }
        else if((*err).errType < 0){
            *err = [GolgiJSONError createWithErrType:GOLGI_ERRTYPE_MALFORMED_JSON andErrText:(*err).errText];
        }
        return nil;
    }
    else{
        return [TapTelegraph_getHiScore_rspArg fromJSONObject:gjo error:err];
    }
}

+ (TapTelegraph_getHiScore_rspArg *)fromJSONObject:(GolgiJSONObject *)jsonObj
{
    GolgiJSONError *_localErr;
    return [TapTelegraph_getHiScore_rspArg fromJSONObject:jsonObj error:&_localErr];
}

+ (TapTelegraph_getHiScore_rspArg *)fromJSONObject:(GolgiJSONObject *)jsonObj error:(GolgiJSONError **)_err
{
    *_err = nil;
    if(jsonObj == nil) return nil;
    TapTelegraph_getHiScore_rspArg *inst = [[TapTelegraph_getHiScore_rspArg alloc] initWithIsSet:NO];
    BOOL corrupt = NO;

    if(!corrupt){
        NSNumber *num;
        if((num = [jsonObj getIntegerWithKey:@"internalSuccess_" error:_err]) != nil){
            inst.internalSuccess_ = num.intValue;
        }
        else if(*_err != nil){
            corrupt = YES;
            [*_err appendErrText:[NSString stringWithFormat:@"\nWhile decoding 'internalSuccess_' in '%@'", GOLGI_STRUCT_NAME]];
        }
    }
    if(!corrupt){
        GolgiJSONObject *obj = nil;
        HiScoreData *_objInst = nil;
        if((obj = [jsonObj getObjectWithKey:@"result" error:_err]) != nil){
            if((_objInst = [HiScoreData fromJSONObject:obj error:_err]) == nil){
                corrupt = YES;
                [*_err appendErrText:[NSString stringWithFormat:@"\nWhile decoding 'result' in '%@'", GOLGI_STRUCT_NAME]];
            }
        }
        else if(*_err != nil){
            corrupt = YES;
            [*_err appendErrText:[NSString stringWithFormat:@"\nWhile decoding 'result' in '%@'", GOLGI_STRUCT_NAME]];
        }
        if(_objInst != nil){
            inst.result = _objInst;
        }
    }
    if(!corrupt){
        GolgiJSONObject *obj = nil;
        GolgiException *_objInst = nil;
        if((obj = [jsonObj getObjectWithKey:@"golgiException" error:_err]) != nil){
            if((_objInst = [GolgiException fromJSONObject:obj error:_err]) == nil){
                corrupt = YES;
                [*_err appendErrText:[NSString stringWithFormat:@"\nWhile decoding 'golgiException' in '%@'", GOLGI_STRUCT_NAME]];
            }
        }
        else if(*_err != nil){
            corrupt = YES;
            [*_err appendErrText:[NSString stringWithFormat:@"\nWhile decoding 'golgiException' in '%@'", GOLGI_STRUCT_NAME]];
        }
        if(_objInst != nil){
            inst.golgiException = _objInst;
        }
    }

    return (corrupt) ? nil : inst;
}

- (NSString *)toJSON
{
    NSMutableString *_str = [[NSMutableString alloc] init];
    NSString *_comma = @"";

    [_str appendString:@"{"];

    if(internalSuccess_IsSet){
        [_str appendFormat:@"%@%@%ld", _comma, [CSL genJSONTag:@"internalSuccess_"], (long)internalSuccess_];
        _comma = @",";
    }
    if(resultIsSet){
        [_str appendFormat:@"%@%@%@", _comma, [CSL genJSONTag:@"result"], [result toJSON]];
        _comma = @",";
    }
    if(golgiExceptionIsSet){
        [_str appendFormat:@"%@%@%@", _comma, [CSL genJSONTag:@"golgiException"], [golgiException toJSON]];
        _comma = @",";
    }

    [_str appendString:@"}"];

    return [NSString stringWithString:_str];
}

- (NSString *)serialise
{
    return [self serialiseWithPrefix:@""];
}

- (NSString *)serialiseWithPrefix:(NSString *)prefix
{
    NSMutableString *_str = [[NSMutableString alloc] init];

    if(internalSuccess_IsSet){
        [_str appendFormat:@"%@1: %ld\n", prefix, (long)internalSuccess_];
    }
    if(resultIsSet){
        [_str appendString:[result serialiseWithPrefix:[NSString stringWithFormat:@"%@%s.", prefix, "2"]]];
    }
    if(golgiExceptionIsSet){
        [_str appendString:[golgiException serialiseWithPrefix:[NSString stringWithFormat:@"%@%s.", prefix, "3"]]];
    }

    return [NSString stringWithString:_str];
}

- (TapTelegraph_getHiScore_rspArg *)init
{
    return [self initWithIsSet:YES];
}

- (id)initWithIsSet:(BOOL)defIsSet
{
    if((self = [super init]) != nil){
        result = [[HiScoreData alloc] initWithIsSet:defIsSet];
        golgiException = [[GolgiException alloc] initWithIsSet:defIsSet];
    }

    return self;

}

@end
@implementation TapTelegraph_newHiScore_reqArg

#ifdef GOLGI_STRUCT_NAME
#undef GOLGI_STRUCT_NAME
#endif
#define GOLGI_STRUCT_NAME @"TapTelegraph_newHiScore_reqArg"

@synthesize hiScoreDataIsSet;
- (HiScoreData *)getHiScoreData
{
    return hiScoreData;
}

- (void)setHiScoreData:(HiScoreData *)_hiScoreData
{
    hiScoreData = _hiScoreData;
    hiScoreDataIsSet = (_hiScoreData != nil) ? YES : NO;
}


+ (TapTelegraph_newHiScore_reqArg *)deserialiseFromString: (NSString *)string
{
    return [TapTelegraph_newHiScore_reqArg deserialiseFromPayload:[GolgiPayload payloadWithString:string]];
}

+ (TapTelegraph_newHiScore_reqArg *)deserialiseFromPayload: (GolgiPayload *)payload
{
    TapTelegraph_newHiScore_reqArg *inst = [[TapTelegraph_newHiScore_reqArg alloc] initWithIsSet:NO];
    BOOL corrupt = NO;

    {
        GolgiPayload *nestedPayload;
        if((nestedPayload = [payload getNestedWithTag:@"1"]) != nil){
            [inst setHiScoreData:[HiScoreData deserialiseFromPayload:nestedPayload]];
        }
        else{
            [inst setHiScoreData:nil];
        }
    }
    if([inst getHiScoreData] == nil){
        corrupt = YES;
    }

    return (corrupt) ? nil : inst;
}

+ (TapTelegraph_newHiScore_reqArg *)fromJSONString:(NSString *)jsonString
{
    GolgiJSONError *_localErr;
    return [TapTelegraph_newHiScore_reqArg fromJSONString:jsonString error:&_localErr];
}

+ (TapTelegraph_newHiScore_reqArg *)fromJSONString:(NSString *)jsonString error:(GolgiJSONError **)err
{
    GolgiJSONObject *gjo = [GolgiJSONObject createFromString:jsonString error:err];
    if(gjo == nil){
        if(*err == nil){
            *err = [GolgiJSONError createWithErrType:GOLGI_ERRTYPE_MALFORMED_JSON andErrText:@"Malformed JSON"];
        }
        else if((*err).errType < 0){
            *err = [GolgiJSONError createWithErrType:GOLGI_ERRTYPE_MALFORMED_JSON andErrText:(*err).errText];
        }
        return nil;
    }
    else{
        return [TapTelegraph_newHiScore_reqArg fromJSONObject:gjo error:err];
    }
}

+ (TapTelegraph_newHiScore_reqArg *)fromJSONObject:(GolgiJSONObject *)jsonObj
{
    GolgiJSONError *_localErr;
    return [TapTelegraph_newHiScore_reqArg fromJSONObject:jsonObj error:&_localErr];
}

+ (TapTelegraph_newHiScore_reqArg *)fromJSONObject:(GolgiJSONObject *)jsonObj error:(GolgiJSONError **)_err
{
    *_err = nil;
    if(jsonObj == nil) return nil;
    TapTelegraph_newHiScore_reqArg *inst = [[TapTelegraph_newHiScore_reqArg alloc] initWithIsSet:NO];
    BOOL corrupt = NO;

    if(!corrupt){
        GolgiJSONObject *obj = nil;
        HiScoreData *_objInst = nil;
        if((obj = [jsonObj getObjectWithKey:@"hiScoreData" error:_err]) != nil){
            if((_objInst = [HiScoreData fromJSONObject:obj error:_err]) == nil){
                corrupt = YES;
                [*_err appendErrText:[NSString stringWithFormat:@"\nWhile decoding 'hiScoreData' in '%@'", GOLGI_STRUCT_NAME]];
            }
        }
        else if(*_err != nil){
            corrupt = YES;
            [*_err appendErrText:[NSString stringWithFormat:@"\nWhile decoding 'hiScoreData' in '%@'", GOLGI_STRUCT_NAME]];
        }
        if(_objInst != nil){
            inst.hiScoreData = _objInst;
        }
        else if(*_err == nil && !corrupt){
            corrupt = YES;
            *_err = [GolgiJSONError createWithErrType:-1 andErrText:[NSString stringWithFormat:@"Missing mandatory field 'hiScoreData' in '%@'", GOLGI_STRUCT_NAME]];
        }
    }

    return (corrupt) ? nil : inst;
}

- (NSString *)toJSON
{
    NSMutableString *_str = [[NSMutableString alloc] init];
    NSString *_comma = @"";

    [_str appendString:@"{"];

    if(hiScoreDataIsSet){
        [_str appendFormat:@"%@%@%@", _comma, [CSL genJSONTag:@"hiScoreData"], [hiScoreData toJSON]];
        _comma = @",";
    }

    [_str appendString:@"}"];

    return [NSString stringWithString:_str];
}

- (NSString *)serialise
{
    return [self serialiseWithPrefix:@""];
}

- (NSString *)serialiseWithPrefix:(NSString *)prefix
{
    NSMutableString *_str = [[NSMutableString alloc] init];

    if(hiScoreDataIsSet){
        [_str appendString:[hiScoreData serialiseWithPrefix:[NSString stringWithFormat:@"%@%s.", prefix, "1"]]];
    }

    return [NSString stringWithString:_str];
}

- (TapTelegraph_newHiScore_reqArg *)init
{
    return [self initWithIsSet:YES];
}

- (id)initWithIsSet:(BOOL)defIsSet
{
    if((self = [super init]) != nil){
        hiScoreData = [[HiScoreData alloc] initWithIsSet:defIsSet];
        hiScoreDataIsSet = defIsSet;
    }

    return self;

}

@end
@implementation TapTelegraph_newHiScore_rspArg

#ifdef GOLGI_STRUCT_NAME
#undef GOLGI_STRUCT_NAME
#endif
#define GOLGI_STRUCT_NAME @"TapTelegraph_newHiScore_rspArg"

@synthesize internalSuccess_IsSet;
- (NSInteger)getInternalSuccess_
{
    return internalSuccess_;
}

- (void)setInternalSuccess_:(NSInteger )_internalSuccess_
{
    internalSuccess_ = _internalSuccess_;
    internalSuccess_IsSet = YES;
}

@synthesize golgiExceptionIsSet;
- (GolgiException *)getGolgiException
{
    return golgiException;
}

- (void)setGolgiException:(GolgiException *)_golgiException
{
    golgiException = _golgiException;
    golgiExceptionIsSet = (_golgiException != nil) ? YES : NO;
}


+ (TapTelegraph_newHiScore_rspArg *)deserialiseFromString: (NSString *)string
{
    return [TapTelegraph_newHiScore_rspArg deserialiseFromPayload:[GolgiPayload payloadWithString:string]];
}

+ (TapTelegraph_newHiScore_rspArg *)deserialiseFromPayload: (GolgiPayload *)payload
{
    TapTelegraph_newHiScore_rspArg *inst = [[TapTelegraph_newHiScore_rspArg alloc] initWithIsSet:NO];
    BOOL corrupt = NO;

    {
        NSNumber *num;
        if((num = [payload getIntWithTag:@"1:"]) != nil){
            inst.internalSuccess_ = [num intValue];
        }
    }

    {
        GolgiPayload *nestedPayload;
        if((nestedPayload = [payload getNestedWithTag:@"3"]) != nil){
            [inst setGolgiException:[GolgiException deserialiseFromPayload:nestedPayload]];
        }
        else{
            [inst setGolgiException:nil];
        }
    }

    return (corrupt) ? nil : inst;
}

+ (TapTelegraph_newHiScore_rspArg *)fromJSONString:(NSString *)jsonString
{
    GolgiJSONError *_localErr;
    return [TapTelegraph_newHiScore_rspArg fromJSONString:jsonString error:&_localErr];
}

+ (TapTelegraph_newHiScore_rspArg *)fromJSONString:(NSString *)jsonString error:(GolgiJSONError **)err
{
    GolgiJSONObject *gjo = [GolgiJSONObject createFromString:jsonString error:err];
    if(gjo == nil){
        if(*err == nil){
            *err = [GolgiJSONError createWithErrType:GOLGI_ERRTYPE_MALFORMED_JSON andErrText:@"Malformed JSON"];
        }
        else if((*err).errType < 0){
            *err = [GolgiJSONError createWithErrType:GOLGI_ERRTYPE_MALFORMED_JSON andErrText:(*err).errText];
        }
        return nil;
    }
    else{
        return [TapTelegraph_newHiScore_rspArg fromJSONObject:gjo error:err];
    }
}

+ (TapTelegraph_newHiScore_rspArg *)fromJSONObject:(GolgiJSONObject *)jsonObj
{
    GolgiJSONError *_localErr;
    return [TapTelegraph_newHiScore_rspArg fromJSONObject:jsonObj error:&_localErr];
}

+ (TapTelegraph_newHiScore_rspArg *)fromJSONObject:(GolgiJSONObject *)jsonObj error:(GolgiJSONError **)_err
{
    *_err = nil;
    if(jsonObj == nil) return nil;
    TapTelegraph_newHiScore_rspArg *inst = [[TapTelegraph_newHiScore_rspArg alloc] initWithIsSet:NO];
    BOOL corrupt = NO;

    if(!corrupt){
        NSNumber *num;
        if((num = [jsonObj getIntegerWithKey:@"internalSuccess_" error:_err]) != nil){
            inst.internalSuccess_ = num.intValue;
        }
        else if(*_err != nil){
            corrupt = YES;
            [*_err appendErrText:[NSString stringWithFormat:@"\nWhile decoding 'internalSuccess_' in '%@'", GOLGI_STRUCT_NAME]];
        }
    }
    if(!corrupt){
        GolgiJSONObject *obj = nil;
        GolgiException *_objInst = nil;
        if((obj = [jsonObj getObjectWithKey:@"golgiException" error:_err]) != nil){
            if((_objInst = [GolgiException fromJSONObject:obj error:_err]) == nil){
                corrupt = YES;
                [*_err appendErrText:[NSString stringWithFormat:@"\nWhile decoding 'golgiException' in '%@'", GOLGI_STRUCT_NAME]];
            }
        }
        else if(*_err != nil){
            corrupt = YES;
            [*_err appendErrText:[NSString stringWithFormat:@"\nWhile decoding 'golgiException' in '%@'", GOLGI_STRUCT_NAME]];
        }
        if(_objInst != nil){
            inst.golgiException = _objInst;
        }
    }

    return (corrupt) ? nil : inst;
}

- (NSString *)toJSON
{
    NSMutableString *_str = [[NSMutableString alloc] init];
    NSString *_comma = @"";

    [_str appendString:@"{"];

    if(internalSuccess_IsSet){
        [_str appendFormat:@"%@%@%ld", _comma, [CSL genJSONTag:@"internalSuccess_"], (long)internalSuccess_];
        _comma = @",";
    }
    if(golgiExceptionIsSet){
        [_str appendFormat:@"%@%@%@", _comma, [CSL genJSONTag:@"golgiException"], [golgiException toJSON]];
        _comma = @",";
    }

    [_str appendString:@"}"];

    return [NSString stringWithString:_str];
}

- (NSString *)serialise
{
    return [self serialiseWithPrefix:@""];
}

- (NSString *)serialiseWithPrefix:(NSString *)prefix
{
    NSMutableString *_str = [[NSMutableString alloc] init];

    if(internalSuccess_IsSet){
        [_str appendFormat:@"%@1: %ld\n", prefix, (long)internalSuccess_];
    }
    if(golgiExceptionIsSet){
        [_str appendString:[golgiException serialiseWithPrefix:[NSString stringWithFormat:@"%@%s.", prefix, "3"]]];
    }

    return [NSString stringWithString:_str];
}

- (TapTelegraph_newHiScore_rspArg *)init
{
    return [self initWithIsSet:YES];
}

- (id)initWithIsSet:(BOOL)defIsSet
{
    if((self = [super init]) != nil){
        golgiException = [[GolgiException alloc] initWithIsSet:defIsSet];
    }

    return self;

}

@end
@implementation TapTelegraph_newPB_reqArg

#ifdef GOLGI_STRUCT_NAME
#undef GOLGI_STRUCT_NAME
#endif
#define GOLGI_STRUCT_NAME @"TapTelegraph_newPB_reqArg"

@synthesize hiScoreDataIsSet;
- (HiScoreData *)getHiScoreData
{
    return hiScoreData;
}

- (void)setHiScoreData:(HiScoreData *)_hiScoreData
{
    hiScoreData = _hiScoreData;
    hiScoreDataIsSet = (_hiScoreData != nil) ? YES : NO;
}


+ (TapTelegraph_newPB_reqArg *)deserialiseFromString: (NSString *)string
{
    return [TapTelegraph_newPB_reqArg deserialiseFromPayload:[GolgiPayload payloadWithString:string]];
}

+ (TapTelegraph_newPB_reqArg *)deserialiseFromPayload: (GolgiPayload *)payload
{
    TapTelegraph_newPB_reqArg *inst = [[TapTelegraph_newPB_reqArg alloc] initWithIsSet:NO];
    BOOL corrupt = NO;

    {
        GolgiPayload *nestedPayload;
        if((nestedPayload = [payload getNestedWithTag:@"1"]) != nil){
            [inst setHiScoreData:[HiScoreData deserialiseFromPayload:nestedPayload]];
        }
        else{
            [inst setHiScoreData:nil];
        }
    }
    if([inst getHiScoreData] == nil){
        corrupt = YES;
    }

    return (corrupt) ? nil : inst;
}

+ (TapTelegraph_newPB_reqArg *)fromJSONString:(NSString *)jsonString
{
    GolgiJSONError *_localErr;
    return [TapTelegraph_newPB_reqArg fromJSONString:jsonString error:&_localErr];
}

+ (TapTelegraph_newPB_reqArg *)fromJSONString:(NSString *)jsonString error:(GolgiJSONError **)err
{
    GolgiJSONObject *gjo = [GolgiJSONObject createFromString:jsonString error:err];
    if(gjo == nil){
        if(*err == nil){
            *err = [GolgiJSONError createWithErrType:GOLGI_ERRTYPE_MALFORMED_JSON andErrText:@"Malformed JSON"];
        }
        else if((*err).errType < 0){
            *err = [GolgiJSONError createWithErrType:GOLGI_ERRTYPE_MALFORMED_JSON andErrText:(*err).errText];
        }
        return nil;
    }
    else{
        return [TapTelegraph_newPB_reqArg fromJSONObject:gjo error:err];
    }
}

+ (TapTelegraph_newPB_reqArg *)fromJSONObject:(GolgiJSONObject *)jsonObj
{
    GolgiJSONError *_localErr;
    return [TapTelegraph_newPB_reqArg fromJSONObject:jsonObj error:&_localErr];
}

+ (TapTelegraph_newPB_reqArg *)fromJSONObject:(GolgiJSONObject *)jsonObj error:(GolgiJSONError **)_err
{
    *_err = nil;
    if(jsonObj == nil) return nil;
    TapTelegraph_newPB_reqArg *inst = [[TapTelegraph_newPB_reqArg alloc] initWithIsSet:NO];
    BOOL corrupt = NO;

    if(!corrupt){
        GolgiJSONObject *obj = nil;
        HiScoreData *_objInst = nil;
        if((obj = [jsonObj getObjectWithKey:@"hiScoreData" error:_err]) != nil){
            if((_objInst = [HiScoreData fromJSONObject:obj error:_err]) == nil){
                corrupt = YES;
                [*_err appendErrText:[NSString stringWithFormat:@"\nWhile decoding 'hiScoreData' in '%@'", GOLGI_STRUCT_NAME]];
            }
        }
        else if(*_err != nil){
            corrupt = YES;
            [*_err appendErrText:[NSString stringWithFormat:@"\nWhile decoding 'hiScoreData' in '%@'", GOLGI_STRUCT_NAME]];
        }
        if(_objInst != nil){
            inst.hiScoreData = _objInst;
        }
        else if(*_err == nil && !corrupt){
            corrupt = YES;
            *_err = [GolgiJSONError createWithErrType:-1 andErrText:[NSString stringWithFormat:@"Missing mandatory field 'hiScoreData' in '%@'", GOLGI_STRUCT_NAME]];
        }
    }

    return (corrupt) ? nil : inst;
}

- (NSString *)toJSON
{
    NSMutableString *_str = [[NSMutableString alloc] init];
    NSString *_comma = @"";

    [_str appendString:@"{"];

    if(hiScoreDataIsSet){
        [_str appendFormat:@"%@%@%@", _comma, [CSL genJSONTag:@"hiScoreData"], [hiScoreData toJSON]];
        _comma = @",";
    }

    [_str appendString:@"}"];

    return [NSString stringWithString:_str];
}

- (NSString *)serialise
{
    return [self serialiseWithPrefix:@""];
}

- (NSString *)serialiseWithPrefix:(NSString *)prefix
{
    NSMutableString *_str = [[NSMutableString alloc] init];

    if(hiScoreDataIsSet){
        [_str appendString:[hiScoreData serialiseWithPrefix:[NSString stringWithFormat:@"%@%s.", prefix, "1"]]];
    }

    return [NSString stringWithString:_str];
}

- (TapTelegraph_newPB_reqArg *)init
{
    return [self initWithIsSet:YES];
}

- (id)initWithIsSet:(BOOL)defIsSet
{
    if((self = [super init]) != nil){
        hiScoreData = [[HiScoreData alloc] initWithIsSet:defIsSet];
        hiScoreDataIsSet = defIsSet;
    }

    return self;

}

@end
@implementation TapTelegraph_newPB_rspArg

#ifdef GOLGI_STRUCT_NAME
#undef GOLGI_STRUCT_NAME
#endif
#define GOLGI_STRUCT_NAME @"TapTelegraph_newPB_rspArg"

@synthesize internalSuccess_IsSet;
- (NSInteger)getInternalSuccess_
{
    return internalSuccess_;
}

- (void)setInternalSuccess_:(NSInteger )_internalSuccess_
{
    internalSuccess_ = _internalSuccess_;
    internalSuccess_IsSet = YES;
}

@synthesize golgiExceptionIsSet;
- (GolgiException *)getGolgiException
{
    return golgiException;
}

- (void)setGolgiException:(GolgiException *)_golgiException
{
    golgiException = _golgiException;
    golgiExceptionIsSet = (_golgiException != nil) ? YES : NO;
}


+ (TapTelegraph_newPB_rspArg *)deserialiseFromString: (NSString *)string
{
    return [TapTelegraph_newPB_rspArg deserialiseFromPayload:[GolgiPayload payloadWithString:string]];
}

+ (TapTelegraph_newPB_rspArg *)deserialiseFromPayload: (GolgiPayload *)payload
{
    TapTelegraph_newPB_rspArg *inst = [[TapTelegraph_newPB_rspArg alloc] initWithIsSet:NO];
    BOOL corrupt = NO;

    {
        NSNumber *num;
        if((num = [payload getIntWithTag:@"1:"]) != nil){
            inst.internalSuccess_ = [num intValue];
        }
    }

    {
        GolgiPayload *nestedPayload;
        if((nestedPayload = [payload getNestedWithTag:@"3"]) != nil){
            [inst setGolgiException:[GolgiException deserialiseFromPayload:nestedPayload]];
        }
        else{
            [inst setGolgiException:nil];
        }
    }

    return (corrupt) ? nil : inst;
}

+ (TapTelegraph_newPB_rspArg *)fromJSONString:(NSString *)jsonString
{
    GolgiJSONError *_localErr;
    return [TapTelegraph_newPB_rspArg fromJSONString:jsonString error:&_localErr];
}

+ (TapTelegraph_newPB_rspArg *)fromJSONString:(NSString *)jsonString error:(GolgiJSONError **)err
{
    GolgiJSONObject *gjo = [GolgiJSONObject createFromString:jsonString error:err];
    if(gjo == nil){
        if(*err == nil){
            *err = [GolgiJSONError createWithErrType:GOLGI_ERRTYPE_MALFORMED_JSON andErrText:@"Malformed JSON"];
        }
        else if((*err).errType < 0){
            *err = [GolgiJSONError createWithErrType:GOLGI_ERRTYPE_MALFORMED_JSON andErrText:(*err).errText];
        }
        return nil;
    }
    else{
        return [TapTelegraph_newPB_rspArg fromJSONObject:gjo error:err];
    }
}

+ (TapTelegraph_newPB_rspArg *)fromJSONObject:(GolgiJSONObject *)jsonObj
{
    GolgiJSONError *_localErr;
    return [TapTelegraph_newPB_rspArg fromJSONObject:jsonObj error:&_localErr];
}

+ (TapTelegraph_newPB_rspArg *)fromJSONObject:(GolgiJSONObject *)jsonObj error:(GolgiJSONError **)_err
{
    *_err = nil;
    if(jsonObj == nil) return nil;
    TapTelegraph_newPB_rspArg *inst = [[TapTelegraph_newPB_rspArg alloc] initWithIsSet:NO];
    BOOL corrupt = NO;

    if(!corrupt){
        NSNumber *num;
        if((num = [jsonObj getIntegerWithKey:@"internalSuccess_" error:_err]) != nil){
            inst.internalSuccess_ = num.intValue;
        }
        else if(*_err != nil){
            corrupt = YES;
            [*_err appendErrText:[NSString stringWithFormat:@"\nWhile decoding 'internalSuccess_' in '%@'", GOLGI_STRUCT_NAME]];
        }
    }
    if(!corrupt){
        GolgiJSONObject *obj = nil;
        GolgiException *_objInst = nil;
        if((obj = [jsonObj getObjectWithKey:@"golgiException" error:_err]) != nil){
            if((_objInst = [GolgiException fromJSONObject:obj error:_err]) == nil){
                corrupt = YES;
                [*_err appendErrText:[NSString stringWithFormat:@"\nWhile decoding 'golgiException' in '%@'", GOLGI_STRUCT_NAME]];
            }
        }
        else if(*_err != nil){
            corrupt = YES;
            [*_err appendErrText:[NSString stringWithFormat:@"\nWhile decoding 'golgiException' in '%@'", GOLGI_STRUCT_NAME]];
        }
        if(_objInst != nil){
            inst.golgiException = _objInst;
        }
    }

    return (corrupt) ? nil : inst;
}

- (NSString *)toJSON
{
    NSMutableString *_str = [[NSMutableString alloc] init];
    NSString *_comma = @"";

    [_str appendString:@"{"];

    if(internalSuccess_IsSet){
        [_str appendFormat:@"%@%@%ld", _comma, [CSL genJSONTag:@"internalSuccess_"], (long)internalSuccess_];
        _comma = @",";
    }
    if(golgiExceptionIsSet){
        [_str appendFormat:@"%@%@%@", _comma, [CSL genJSONTag:@"golgiException"], [golgiException toJSON]];
        _comma = @",";
    }

    [_str appendString:@"}"];

    return [NSString stringWithString:_str];
}

- (NSString *)serialise
{
    return [self serialiseWithPrefix:@""];
}

- (NSString *)serialiseWithPrefix:(NSString *)prefix
{
    NSMutableString *_str = [[NSMutableString alloc] init];

    if(internalSuccess_IsSet){
        [_str appendFormat:@"%@1: %ld\n", prefix, (long)internalSuccess_];
    }
    if(golgiExceptionIsSet){
        [_str appendString:[golgiException serialiseWithPrefix:[NSString stringWithFormat:@"%@%s.", prefix, "3"]]];
    }

    return [NSString stringWithString:_str];
}

- (TapTelegraph_newPB_rspArg *)init
{
    return [self initWithIsSet:YES];
}

- (id)initWithIsSet:(BOOL)defIsSet
{
    if((self = [super init]) != nil){
        golgiException = [[GolgiException alloc] initWithIsSet:defIsSet];
    }

    return self;

}

@end
@implementation TapTelegraphStartGameExceptionBundle
@synthesize golgiException;
- (TapTelegraphStartGameExceptionBundle *) init
{
    self = [super init];

    golgiException = nil;
    return self;
}
@end

@interface StartGameInternalResultSender : NSObject <TapTelegraphStartGameResultSender>
{
    NSString *sender;
    NSString *msgId;
    TapTelegraph_startGame_rspArg *rsp;
}
- (StartGameInternalResultSender *) initWithSender:(NSString *)sender andMessageId:(NSString *)msgId;
@end
@implementation StartGameInternalResultSender
- (NSString *)getRequestSenderId
{
    return sender;
}

- (StartGameInternalResultSender *) initWithSender:(NSString *)_sender andMessageId:(NSString *)_msgId
{
    self = [self init];
    sender = _sender;
    msgId = _msgId;
    rsp = [[TapTelegraph_startGame_rspArg alloc] initWithIsSet:NO];

    return self;
}

- (void)sendResponse
{
    [Golgi sendResponsePayload:[rsp serialise] to:sender forMethod:@"startGame.TapTelegraph" withMessageId:msgId];
}

- (void)failureWithGolgiException:(GolgiException *)golgiException
{
    [rsp setGolgiException:golgiException];
    [self sendResponse];
}

- (void)success
{
    [rsp setInternalSuccess_:1];
    [self sendResponse];
}

@end

@interface StartGameInternalRequestHandler : NSObject <GolgiInternalInboundRequestHandler>
{
    id<TapTelegraphStartGameRequestReceiver> receiver;
    void (^userHandler)(id<TapTelegraphStartGameResultSender> resultSender, PlayerInfo * playerInfo);
}

- (StartGameInternalRequestHandler *)initWithReceiver:(id<TapTelegraphStartGameRequestReceiver>)receiver;
- (StartGameInternalRequestHandler *)initWithHandler:(void (^)(id<TapTelegraphStartGameResultSender> resultSender, PlayerInfo * playerInfo))userHandler;
@end

@implementation StartGameInternalRequestHandler

- (void)incomingMsg:(NSString *)payload from:(NSString *)sender withMessageId:(NSString *)msgId
{
    TapTelegraph_startGame_reqArg *req = [TapTelegraph_startGame_reqArg deserialiseFromString:payload];

    if(req == nil){
        [Golgi sendRemoteError:@"Garbled Payload at Remote End" to:sender forMethod:@"startGame.TapTelegraph" withMessageId:msgId];
    }
    else{
        // Process req here
        StartGameInternalResultSender *resultSender;
        resultSender = [StartGameInternalResultSender alloc];
        resultSender = [resultSender initWithSender:sender andMessageId:msgId];
        if(receiver != nil){
            [receiver startGameWithResultSender:resultSender andPlayerInfo:[req getPlayerInfo]];
        }
        else if(userHandler != nil){
            userHandler(resultSender, [req getPlayerInfo]);    }
    }
}

- (StartGameInternalRequestHandler *)initWithReceiver:(id<TapTelegraphStartGameRequestReceiver>)_receiver
{
    self = [self init];
    receiver = _receiver;

    return self;
}
- (StartGameInternalRequestHandler *)initWithHandler:(void (^)(id<TapTelegraphStartGameResultSender> resultSender, PlayerInfo * playerInfo))_userHandler
{
    self = [self init];
    userHandler = _userHandler;

    return self;
}
@end

@interface StartGameInternalResponseHandler : NSObject <GolgiInternalInboundResponseHandler>
{
    id<TapTelegraphStartGameResultReceiver> receiver;
    void (^handler)(TapTelegraphStartGameExceptionBundle *exceptionBundle);
}

- (StartGameInternalResponseHandler *)initWithReceiver:(id<TapTelegraphStartGameResultReceiver>)receiver orHandler:(void (^)(TapTelegraphStartGameExceptionBundle *exceptionBundle))handler;
@end
@implementation StartGameInternalResponseHandler

- (void)processResponsePayload:(NSString *)payload
{
    TapTelegraph_startGame_rspArg *rsp = [TapTelegraph_startGame_rspArg deserialiseFromString:payload];
    TapTelegraphStartGameExceptionBundle *exBundle = [[TapTelegraphStartGameExceptionBundle alloc] init];

    if(rsp == nil){
        GolgiException *golgiException = [[GolgiException alloc]init];

        [golgiException setErrText:@"Corrupt Response"];
        [golgiException setErrType:GOLGI_ERRTYPE_PAYLOAD_MISMATCH];
        if(receiver != nil){
            [receiver failureWithGolgiException:golgiException];
        }
        else{ // Must have a handler
            exBundle.golgiException = golgiException;
            handler(exBundle);
        }
    }
    else if(rsp.internalSuccess_IsSet && ([rsp getInternalSuccess_] != 0)){
        if(receiver != nil){
            [receiver success];
        }
        else{ // Must have a handler
            handler(nil);
        }
    }
    else if(rsp.golgiExceptionIsSet){
        if(receiver != nil){
            [receiver failureWithGolgiException:[rsp getGolgiException]];
        }
        else{ // Must have a handler
            exBundle.golgiException = [rsp getGolgiException];
            handler(exBundle);
        }
    }
    else{
        NSLog(@"WARNING: result for 'startGame' in Golgi Service 'TapTelegraph' has no expected response fields set!");
    }

}

- (void)processGolgiException:(GolgiException *)golgiException
{
	[receiver failureWithGolgiException:golgiException];
}

- (StartGameInternalResponseHandler *)initWithReceiver:(id<TapTelegraphStartGameResultReceiver>)_receiver orHandler:(void (^)(TapTelegraphStartGameExceptionBundle *exceptionBundle))_handler
{
    self = [self init];
    receiver = _receiver;
    handler = _handler;
    return self;
}

@end

@implementation TapTelegraphSendTapExceptionBundle
@synthesize golgiException;
- (TapTelegraphSendTapExceptionBundle *) init
{
    self = [super init];

    golgiException = nil;
    return self;
}
@end

@interface SendTapInternalResultSender : NSObject <TapTelegraphSendTapResultSender>
{
    NSString *sender;
    NSString *msgId;
    TapTelegraph_sendTap_rspArg *rsp;
}
- (SendTapInternalResultSender *) initWithSender:(NSString *)sender andMessageId:(NSString *)msgId;
@end
@implementation SendTapInternalResultSender
- (NSString *)getRequestSenderId
{
    return sender;
}

- (SendTapInternalResultSender *) initWithSender:(NSString *)_sender andMessageId:(NSString *)_msgId
{
    self = [self init];
    sender = _sender;
    msgId = _msgId;
    rsp = [[TapTelegraph_sendTap_rspArg alloc] initWithIsSet:NO];

    return self;
}

- (void)sendResponse
{
    [Golgi sendResponsePayload:[rsp serialise] to:sender forMethod:@"sendTap.TapTelegraph" withMessageId:msgId];
}

- (void)failureWithGolgiException:(GolgiException *)golgiException
{
    [rsp setGolgiException:golgiException];
    [self sendResponse];
}

- (void)success
{
    [rsp setInternalSuccess_:1];
    [self sendResponse];
}

@end

@interface SendTapInternalRequestHandler : NSObject <GolgiInternalInboundRequestHandler>
{
    id<TapTelegraphSendTapRequestReceiver> receiver;
    void (^userHandler)(id<TapTelegraphSendTapResultSender> resultSender, TapData * tapData);
}

- (SendTapInternalRequestHandler *)initWithReceiver:(id<TapTelegraphSendTapRequestReceiver>)receiver;
- (SendTapInternalRequestHandler *)initWithHandler:(void (^)(id<TapTelegraphSendTapResultSender> resultSender, TapData * tapData))userHandler;
@end

@implementation SendTapInternalRequestHandler

- (void)incomingMsg:(NSString *)payload from:(NSString *)sender withMessageId:(NSString *)msgId
{
    TapTelegraph_sendTap_reqArg *req = [TapTelegraph_sendTap_reqArg deserialiseFromString:payload];

    if(req == nil){
        [Golgi sendRemoteError:@"Garbled Payload at Remote End" to:sender forMethod:@"sendTap.TapTelegraph" withMessageId:msgId];
    }
    else{
        // Process req here
        SendTapInternalResultSender *resultSender;
        resultSender = [SendTapInternalResultSender alloc];
        resultSender = [resultSender initWithSender:sender andMessageId:msgId];
        if(receiver != nil){
            [receiver sendTapWithResultSender:resultSender andTapData:[req getTapData]];
        }
        else if(userHandler != nil){
            userHandler(resultSender, [req getTapData]);    }
    }
}

- (SendTapInternalRequestHandler *)initWithReceiver:(id<TapTelegraphSendTapRequestReceiver>)_receiver
{
    self = [self init];
    receiver = _receiver;

    return self;
}
- (SendTapInternalRequestHandler *)initWithHandler:(void (^)(id<TapTelegraphSendTapResultSender> resultSender, TapData * tapData))_userHandler
{
    self = [self init];
    userHandler = _userHandler;

    return self;
}
@end

@interface SendTapInternalResponseHandler : NSObject <GolgiInternalInboundResponseHandler>
{
    id<TapTelegraphSendTapResultReceiver> receiver;
    void (^handler)(TapTelegraphSendTapExceptionBundle *exceptionBundle);
}

- (SendTapInternalResponseHandler *)initWithReceiver:(id<TapTelegraphSendTapResultReceiver>)receiver orHandler:(void (^)(TapTelegraphSendTapExceptionBundle *exceptionBundle))handler;
@end
@implementation SendTapInternalResponseHandler

- (void)processResponsePayload:(NSString *)payload
{
    TapTelegraph_sendTap_rspArg *rsp = [TapTelegraph_sendTap_rspArg deserialiseFromString:payload];
    TapTelegraphSendTapExceptionBundle *exBundle = [[TapTelegraphSendTapExceptionBundle alloc] init];

    if(rsp == nil){
        GolgiException *golgiException = [[GolgiException alloc]init];

        [golgiException setErrText:@"Corrupt Response"];
        [golgiException setErrType:GOLGI_ERRTYPE_PAYLOAD_MISMATCH];
        if(receiver != nil){
            [receiver failureWithGolgiException:golgiException];
        }
        else{ // Must have a handler
            exBundle.golgiException = golgiException;
            handler(exBundle);
        }
    }
    else if(rsp.internalSuccess_IsSet && ([rsp getInternalSuccess_] != 0)){
        if(receiver != nil){
            [receiver success];
        }
        else{ // Must have a handler
            handler(nil);
        }
    }
    else if(rsp.golgiExceptionIsSet){
        if(receiver != nil){
            [receiver failureWithGolgiException:[rsp getGolgiException]];
        }
        else{ // Must have a handler
            exBundle.golgiException = [rsp getGolgiException];
            handler(exBundle);
        }
    }
    else{
        NSLog(@"WARNING: result for 'sendTap' in Golgi Service 'TapTelegraph' has no expected response fields set!");
    }

}

- (void)processGolgiException:(GolgiException *)golgiException
{
	[receiver failureWithGolgiException:golgiException];
}

- (SendTapInternalResponseHandler *)initWithReceiver:(id<TapTelegraphSendTapResultReceiver>)_receiver orHandler:(void (^)(TapTelegraphSendTapExceptionBundle *exceptionBundle))_handler
{
    self = [self init];
    receiver = _receiver;
    handler = _handler;
    return self;
}

@end

@implementation TapTelegraphGameOverExceptionBundle
@synthesize golgiException;
- (TapTelegraphGameOverExceptionBundle *) init
{
    self = [super init];

    golgiException = nil;
    return self;
}
@end

@interface GameOverInternalResultSender : NSObject <TapTelegraphGameOverResultSender>
{
    NSString *sender;
    NSString *msgId;
    TapTelegraph_gameOver_rspArg *rsp;
}
- (GameOverInternalResultSender *) initWithSender:(NSString *)sender andMessageId:(NSString *)msgId;
@end
@implementation GameOverInternalResultSender
- (NSString *)getRequestSenderId
{
    return sender;
}

- (GameOverInternalResultSender *) initWithSender:(NSString *)_sender andMessageId:(NSString *)_msgId
{
    self = [self init];
    sender = _sender;
    msgId = _msgId;
    rsp = [[TapTelegraph_gameOver_rspArg alloc] initWithIsSet:NO];

    return self;
}

- (void)sendResponse
{
    [Golgi sendResponsePayload:[rsp serialise] to:sender forMethod:@"gameOver.TapTelegraph" withMessageId:msgId];
}

- (void)failureWithGolgiException:(GolgiException *)golgiException
{
    [rsp setGolgiException:golgiException];
    [self sendResponse];
}

- (void)success
{
    [rsp setInternalSuccess_:1];
    [self sendResponse];
}

@end

@interface GameOverInternalRequestHandler : NSObject <GolgiInternalInboundRequestHandler>
{
    id<TapTelegraphGameOverRequestReceiver> receiver;
    void (^userHandler)(id<TapTelegraphGameOverResultSender> resultSender, GameOverData * gameOverData);
}

- (GameOverInternalRequestHandler *)initWithReceiver:(id<TapTelegraphGameOverRequestReceiver>)receiver;
- (GameOverInternalRequestHandler *)initWithHandler:(void (^)(id<TapTelegraphGameOverResultSender> resultSender, GameOverData * gameOverData))userHandler;
@end

@implementation GameOverInternalRequestHandler

- (void)incomingMsg:(NSString *)payload from:(NSString *)sender withMessageId:(NSString *)msgId
{
    TapTelegraph_gameOver_reqArg *req = [TapTelegraph_gameOver_reqArg deserialiseFromString:payload];

    if(req == nil){
        [Golgi sendRemoteError:@"Garbled Payload at Remote End" to:sender forMethod:@"gameOver.TapTelegraph" withMessageId:msgId];
    }
    else{
        // Process req here
        GameOverInternalResultSender *resultSender;
        resultSender = [GameOverInternalResultSender alloc];
        resultSender = [resultSender initWithSender:sender andMessageId:msgId];
        if(receiver != nil){
            [receiver gameOverWithResultSender:resultSender andGameOverData:[req getGameOverData]];
        }
        else if(userHandler != nil){
            userHandler(resultSender, [req getGameOverData]);    }
    }
}

- (GameOverInternalRequestHandler *)initWithReceiver:(id<TapTelegraphGameOverRequestReceiver>)_receiver
{
    self = [self init];
    receiver = _receiver;

    return self;
}
- (GameOverInternalRequestHandler *)initWithHandler:(void (^)(id<TapTelegraphGameOverResultSender> resultSender, GameOverData * gameOverData))_userHandler
{
    self = [self init];
    userHandler = _userHandler;

    return self;
}
@end

@interface GameOverInternalResponseHandler : NSObject <GolgiInternalInboundResponseHandler>
{
    id<TapTelegraphGameOverResultReceiver> receiver;
    void (^handler)(TapTelegraphGameOverExceptionBundle *exceptionBundle);
}

- (GameOverInternalResponseHandler *)initWithReceiver:(id<TapTelegraphGameOverResultReceiver>)receiver orHandler:(void (^)(TapTelegraphGameOverExceptionBundle *exceptionBundle))handler;
@end
@implementation GameOverInternalResponseHandler

- (void)processResponsePayload:(NSString *)payload
{
    TapTelegraph_gameOver_rspArg *rsp = [TapTelegraph_gameOver_rspArg deserialiseFromString:payload];
    TapTelegraphGameOverExceptionBundle *exBundle = [[TapTelegraphGameOverExceptionBundle alloc] init];

    if(rsp == nil){
        GolgiException *golgiException = [[GolgiException alloc]init];

        [golgiException setErrText:@"Corrupt Response"];
        [golgiException setErrType:GOLGI_ERRTYPE_PAYLOAD_MISMATCH];
        if(receiver != nil){
            [receiver failureWithGolgiException:golgiException];
        }
        else{ // Must have a handler
            exBundle.golgiException = golgiException;
            handler(exBundle);
        }
    }
    else if(rsp.internalSuccess_IsSet && ([rsp getInternalSuccess_] != 0)){
        if(receiver != nil){
            [receiver success];
        }
        else{ // Must have a handler
            handler(nil);
        }
    }
    else if(rsp.golgiExceptionIsSet){
        if(receiver != nil){
            [receiver failureWithGolgiException:[rsp getGolgiException]];
        }
        else{ // Must have a handler
            exBundle.golgiException = [rsp getGolgiException];
            handler(exBundle);
        }
    }
    else{
        NSLog(@"WARNING: result for 'gameOver' in Golgi Service 'TapTelegraph' has no expected response fields set!");
    }

}

- (void)processGolgiException:(GolgiException *)golgiException
{
	[receiver failureWithGolgiException:golgiException];
}

- (GameOverInternalResponseHandler *)initWithReceiver:(id<TapTelegraphGameOverResultReceiver>)_receiver orHandler:(void (^)(TapTelegraphGameOverExceptionBundle *exceptionBundle))_handler
{
    self = [self init];
    receiver = _receiver;
    handler = _handler;
    return self;
}

@end

@implementation TapTelegraphStreamGameExceptionBundle
@synthesize golgiException;
- (TapTelegraphStreamGameExceptionBundle *) init
{
    self = [super init];

    golgiException = nil;
    return self;
}
@end

@interface StreamGameInternalResultSender : NSObject <TapTelegraphStreamGameResultSender>
{
    NSString *sender;
    NSString *msgId;
    TapTelegraph_streamGame_rspArg *rsp;
}
- (StreamGameInternalResultSender *) initWithSender:(NSString *)sender andMessageId:(NSString *)msgId;
@end
@implementation StreamGameInternalResultSender
- (NSString *)getRequestSenderId
{
    return sender;
}

- (StreamGameInternalResultSender *) initWithSender:(NSString *)_sender andMessageId:(NSString *)_msgId
{
    self = [self init];
    sender = _sender;
    msgId = _msgId;
    rsp = [[TapTelegraph_streamGame_rspArg alloc] initWithIsSet:NO];

    return self;
}

- (void)sendResponse
{
    [Golgi sendResponsePayload:[rsp serialise] to:sender forMethod:@"streamGame.TapTelegraph" withMessageId:msgId];
}

- (void)failureWithGolgiException:(GolgiException *)golgiException
{
    [rsp setGolgiException:golgiException];
    [self sendResponse];
}

- (void)success
{
    [rsp setInternalSuccess_:1];
    [self sendResponse];
}

@end

@interface StreamGameInternalRequestHandler : NSObject <GolgiInternalInboundRequestHandler>
{
    id<TapTelegraphStreamGameRequestReceiver> receiver;
    void (^userHandler)(id<TapTelegraphStreamGameResultSender> resultSender, NSString * golgiId);
}

- (StreamGameInternalRequestHandler *)initWithReceiver:(id<TapTelegraphStreamGameRequestReceiver>)receiver;
- (StreamGameInternalRequestHandler *)initWithHandler:(void (^)(id<TapTelegraphStreamGameResultSender> resultSender, NSString * golgiId))userHandler;
@end

@implementation StreamGameInternalRequestHandler

- (void)incomingMsg:(NSString *)payload from:(NSString *)sender withMessageId:(NSString *)msgId
{
    TapTelegraph_streamGame_reqArg *req = [TapTelegraph_streamGame_reqArg deserialiseFromString:payload];

    if(req == nil){
        [Golgi sendRemoteError:@"Garbled Payload at Remote End" to:sender forMethod:@"streamGame.TapTelegraph" withMessageId:msgId];
    }
    else{
        // Process req here
        StreamGameInternalResultSender *resultSender;
        resultSender = [StreamGameInternalResultSender alloc];
        resultSender = [resultSender initWithSender:sender andMessageId:msgId];
        if(receiver != nil){
            [receiver streamGameWithResultSender:resultSender andGolgiId:[req getGolgiId]];
        }
        else if(userHandler != nil){
            userHandler(resultSender, [req getGolgiId]);    }
    }
}

- (StreamGameInternalRequestHandler *)initWithReceiver:(id<TapTelegraphStreamGameRequestReceiver>)_receiver
{
    self = [self init];
    receiver = _receiver;

    return self;
}
- (StreamGameInternalRequestHandler *)initWithHandler:(void (^)(id<TapTelegraphStreamGameResultSender> resultSender, NSString * golgiId))_userHandler
{
    self = [self init];
    userHandler = _userHandler;

    return self;
}
@end

@interface StreamGameInternalResponseHandler : NSObject <GolgiInternalInboundResponseHandler>
{
    id<TapTelegraphStreamGameResultReceiver> receiver;
    void (^handler)(TapTelegraphStreamGameExceptionBundle *exceptionBundle);
}

- (StreamGameInternalResponseHandler *)initWithReceiver:(id<TapTelegraphStreamGameResultReceiver>)receiver orHandler:(void (^)(TapTelegraphStreamGameExceptionBundle *exceptionBundle))handler;
@end
@implementation StreamGameInternalResponseHandler

- (void)processResponsePayload:(NSString *)payload
{
    TapTelegraph_streamGame_rspArg *rsp = [TapTelegraph_streamGame_rspArg deserialiseFromString:payload];
    TapTelegraphStreamGameExceptionBundle *exBundle = [[TapTelegraphStreamGameExceptionBundle alloc] init];

    if(rsp == nil){
        GolgiException *golgiException = [[GolgiException alloc]init];

        [golgiException setErrText:@"Corrupt Response"];
        [golgiException setErrType:GOLGI_ERRTYPE_PAYLOAD_MISMATCH];
        if(receiver != nil){
            [receiver failureWithGolgiException:golgiException];
        }
        else{ // Must have a handler
            exBundle.golgiException = golgiException;
            handler(exBundle);
        }
    }
    else if(rsp.internalSuccess_IsSet && ([rsp getInternalSuccess_] != 0)){
        if(receiver != nil){
            [receiver success];
        }
        else{ // Must have a handler
            handler(nil);
        }
    }
    else if(rsp.golgiExceptionIsSet){
        if(receiver != nil){
            [receiver failureWithGolgiException:[rsp getGolgiException]];
        }
        else{ // Must have a handler
            exBundle.golgiException = [rsp getGolgiException];
            handler(exBundle);
        }
    }
    else{
        NSLog(@"WARNING: result for 'streamGame' in Golgi Service 'TapTelegraph' has no expected response fields set!");
    }

}

- (void)processGolgiException:(GolgiException *)golgiException
{
	[receiver failureWithGolgiException:golgiException];
}

- (StreamGameInternalResponseHandler *)initWithReceiver:(id<TapTelegraphStreamGameResultReceiver>)_receiver orHandler:(void (^)(TapTelegraphStreamGameExceptionBundle *exceptionBundle))_handler
{
    self = [self init];
    receiver = _receiver;
    handler = _handler;
    return self;
}

@end

@implementation TapTelegraphGetHiScoreExceptionBundle
@synthesize golgiException;
- (TapTelegraphGetHiScoreExceptionBundle *) init
{
    self = [super init];

    golgiException = nil;
    return self;
}
@end

@interface GetHiScoreInternalResultSender : NSObject <TapTelegraphGetHiScoreResultSender>
{
    NSString *sender;
    NSString *msgId;
    TapTelegraph_getHiScore_rspArg *rsp;
}
- (GetHiScoreInternalResultSender *) initWithSender:(NSString *)sender andMessageId:(NSString *)msgId;
@end
@implementation GetHiScoreInternalResultSender
- (NSString *)getRequestSenderId
{
    return sender;
}

- (GetHiScoreInternalResultSender *) initWithSender:(NSString *)_sender andMessageId:(NSString *)_msgId
{
    self = [self init];
    sender = _sender;
    msgId = _msgId;
    rsp = [[TapTelegraph_getHiScore_rspArg alloc] initWithIsSet:NO];

    return self;
}

- (void)sendResponse
{
    [Golgi sendResponsePayload:[rsp serialise] to:sender forMethod:@"getHiScore.TapTelegraph" withMessageId:msgId];
}

- (void)successWithResult:(HiScoreData *)result
{
    [rsp setInternalSuccess_:1];
    [rsp setResult: result];
    [self sendResponse];
}

- (void)failureWithGolgiException:(GolgiException *)golgiException
{
    [rsp setGolgiException:golgiException];
    [self sendResponse];
}

@end

@interface GetHiScoreInternalRequestHandler : NSObject <GolgiInternalInboundRequestHandler>
{
    id<TapTelegraphGetHiScoreRequestReceiver> receiver;
    void (^userHandler)(id<TapTelegraphGetHiScoreResultSender> resultSender, NSInteger pooky);
}

- (GetHiScoreInternalRequestHandler *)initWithReceiver:(id<TapTelegraphGetHiScoreRequestReceiver>)receiver;
- (GetHiScoreInternalRequestHandler *)initWithHandler:(void (^)(id<TapTelegraphGetHiScoreResultSender> resultSender, NSInteger pooky))userHandler;
@end

@implementation GetHiScoreInternalRequestHandler

- (void)incomingMsg:(NSString *)payload from:(NSString *)sender withMessageId:(NSString *)msgId
{
    TapTelegraph_getHiScore_reqArg *req = [TapTelegraph_getHiScore_reqArg deserialiseFromString:payload];

    if(req == nil){
        [Golgi sendRemoteError:@"Garbled Payload at Remote End" to:sender forMethod:@"getHiScore.TapTelegraph" withMessageId:msgId];
    }
    else{
        // Process req here
        GetHiScoreInternalResultSender *resultSender;
        resultSender = [GetHiScoreInternalResultSender alloc];
        resultSender = [resultSender initWithSender:sender andMessageId:msgId];
        if(receiver != nil){
            [receiver getHiScoreWithResultSender:resultSender andPooky:[req getPooky]];
        }
        else if(userHandler != nil){
            userHandler(resultSender, [req getPooky]);    }
    }
}

- (GetHiScoreInternalRequestHandler *)initWithReceiver:(id<TapTelegraphGetHiScoreRequestReceiver>)_receiver
{
    self = [self init];
    receiver = _receiver;

    return self;
}
- (GetHiScoreInternalRequestHandler *)initWithHandler:(void (^)(id<TapTelegraphGetHiScoreResultSender> resultSender, NSInteger pooky))_userHandler
{
    self = [self init];
    userHandler = _userHandler;

    return self;
}
@end

@interface GetHiScoreInternalResponseHandler : NSObject <GolgiInternalInboundResponseHandler>
{
    id<TapTelegraphGetHiScoreResultReceiver> receiver;
    void (^handler)(HiScoreData *Result,TapTelegraphGetHiScoreExceptionBundle *exceptionBundle);
}

- (GetHiScoreInternalResponseHandler *)initWithReceiver:(id<TapTelegraphGetHiScoreResultReceiver>)receiver orHandler:(void (^)(HiScoreData *Result,TapTelegraphGetHiScoreExceptionBundle *exceptionBundle))handler;
@end
@implementation GetHiScoreInternalResponseHandler

- (void)processResponsePayload:(NSString *)payload
{
    TapTelegraph_getHiScore_rspArg *rsp = [TapTelegraph_getHiScore_rspArg deserialiseFromString:payload];
    TapTelegraphGetHiScoreExceptionBundle *exBundle = [[TapTelegraphGetHiScoreExceptionBundle alloc] init];

    if(rsp == nil){
        GolgiException *golgiException = [[GolgiException alloc]init];

        [golgiException setErrText:@"Corrupt Response"];
        [golgiException setErrType:GOLGI_ERRTYPE_PAYLOAD_MISMATCH];
        if(receiver != nil){
            [receiver failureWithGolgiException:golgiException];
        }
        else{ // Must have a handler
            exBundle.golgiException = golgiException;
            handler(nil, exBundle);
        }
    }
    else if(rsp.internalSuccess_IsSet && ([rsp getInternalSuccess_] != 0)){
        if(receiver != nil){
            [receiver successWithResult:[rsp getResult]];
        }
        else{ // Must have a handler
            handler([rsp getResult], nil);
        }
    }
    else if(rsp.golgiExceptionIsSet){
        if(receiver != nil){
            [receiver failureWithGolgiException:[rsp getGolgiException]];
        }
        else{ // Must have a handler
            exBundle.golgiException = [rsp getGolgiException];
            handler(nil, exBundle);
        }
    }
    else{
        NSLog(@"WARNING: result for 'getHiScore' in Golgi Service 'TapTelegraph' has no expected response fields set!");
    }

}

- (void)processGolgiException:(GolgiException *)golgiException
{
	[receiver failureWithGolgiException:golgiException];
}

- (GetHiScoreInternalResponseHandler *)initWithReceiver:(id<TapTelegraphGetHiScoreResultReceiver>)_receiver orHandler:(void (^)(HiScoreData *Result,TapTelegraphGetHiScoreExceptionBundle *exceptionBundle))_handler
{
    self = [self init];
    receiver = _receiver;
    handler = _handler;
    return self;
}

@end

@implementation TapTelegraphNewHiScoreExceptionBundle
@synthesize golgiException;
- (TapTelegraphNewHiScoreExceptionBundle *) init
{
    self = [super init];

    golgiException = nil;
    return self;
}
@end

@interface NewHiScoreInternalResultSender : NSObject <TapTelegraphNewHiScoreResultSender>
{
    NSString *sender;
    NSString *msgId;
    TapTelegraph_newHiScore_rspArg *rsp;
}
- (NewHiScoreInternalResultSender *) initWithSender:(NSString *)sender andMessageId:(NSString *)msgId;
@end
@implementation NewHiScoreInternalResultSender
- (NSString *)getRequestSenderId
{
    return sender;
}

- (NewHiScoreInternalResultSender *) initWithSender:(NSString *)_sender andMessageId:(NSString *)_msgId
{
    self = [self init];
    sender = _sender;
    msgId = _msgId;
    rsp = [[TapTelegraph_newHiScore_rspArg alloc] initWithIsSet:NO];

    return self;
}

- (void)sendResponse
{
    [Golgi sendResponsePayload:[rsp serialise] to:sender forMethod:@"newHiScore.TapTelegraph" withMessageId:msgId];
}

- (void)failureWithGolgiException:(GolgiException *)golgiException
{
    [rsp setGolgiException:golgiException];
    [self sendResponse];
}

- (void)success
{
    [rsp setInternalSuccess_:1];
    [self sendResponse];
}

@end

@interface NewHiScoreInternalRequestHandler : NSObject <GolgiInternalInboundRequestHandler>
{
    id<TapTelegraphNewHiScoreRequestReceiver> receiver;
    void (^userHandler)(id<TapTelegraphNewHiScoreResultSender> resultSender, HiScoreData * hiScoreData);
}

- (NewHiScoreInternalRequestHandler *)initWithReceiver:(id<TapTelegraphNewHiScoreRequestReceiver>)receiver;
- (NewHiScoreInternalRequestHandler *)initWithHandler:(void (^)(id<TapTelegraphNewHiScoreResultSender> resultSender, HiScoreData * hiScoreData))userHandler;
@end

@implementation NewHiScoreInternalRequestHandler

- (void)incomingMsg:(NSString *)payload from:(NSString *)sender withMessageId:(NSString *)msgId
{
    TapTelegraph_newHiScore_reqArg *req = [TapTelegraph_newHiScore_reqArg deserialiseFromString:payload];

    if(req == nil){
        [Golgi sendRemoteError:@"Garbled Payload at Remote End" to:sender forMethod:@"newHiScore.TapTelegraph" withMessageId:msgId];
    }
    else{
        // Process req here
        NewHiScoreInternalResultSender *resultSender;
        resultSender = [NewHiScoreInternalResultSender alloc];
        resultSender = [resultSender initWithSender:sender andMessageId:msgId];
        if(receiver != nil){
            [receiver newHiScoreWithResultSender:resultSender andHiScoreData:[req getHiScoreData]];
        }
        else if(userHandler != nil){
            userHandler(resultSender, [req getHiScoreData]);    }
    }
}

- (NewHiScoreInternalRequestHandler *)initWithReceiver:(id<TapTelegraphNewHiScoreRequestReceiver>)_receiver
{
    self = [self init];
    receiver = _receiver;

    return self;
}
- (NewHiScoreInternalRequestHandler *)initWithHandler:(void (^)(id<TapTelegraphNewHiScoreResultSender> resultSender, HiScoreData * hiScoreData))_userHandler
{
    self = [self init];
    userHandler = _userHandler;

    return self;
}
@end

@interface NewHiScoreInternalResponseHandler : NSObject <GolgiInternalInboundResponseHandler>
{
    id<TapTelegraphNewHiScoreResultReceiver> receiver;
    void (^handler)(TapTelegraphNewHiScoreExceptionBundle *exceptionBundle);
}

- (NewHiScoreInternalResponseHandler *)initWithReceiver:(id<TapTelegraphNewHiScoreResultReceiver>)receiver orHandler:(void (^)(TapTelegraphNewHiScoreExceptionBundle *exceptionBundle))handler;
@end
@implementation NewHiScoreInternalResponseHandler

- (void)processResponsePayload:(NSString *)payload
{
    TapTelegraph_newHiScore_rspArg *rsp = [TapTelegraph_newHiScore_rspArg deserialiseFromString:payload];
    TapTelegraphNewHiScoreExceptionBundle *exBundle = [[TapTelegraphNewHiScoreExceptionBundle alloc] init];

    if(rsp == nil){
        GolgiException *golgiException = [[GolgiException alloc]init];

        [golgiException setErrText:@"Corrupt Response"];
        [golgiException setErrType:GOLGI_ERRTYPE_PAYLOAD_MISMATCH];
        if(receiver != nil){
            [receiver failureWithGolgiException:golgiException];
        }
        else{ // Must have a handler
            exBundle.golgiException = golgiException;
            handler(exBundle);
        }
    }
    else if(rsp.internalSuccess_IsSet && ([rsp getInternalSuccess_] != 0)){
        if(receiver != nil){
            [receiver success];
        }
        else{ // Must have a handler
            handler(nil);
        }
    }
    else if(rsp.golgiExceptionIsSet){
        if(receiver != nil){
            [receiver failureWithGolgiException:[rsp getGolgiException]];
        }
        else{ // Must have a handler
            exBundle.golgiException = [rsp getGolgiException];
            handler(exBundle);
        }
    }
    else{
        NSLog(@"WARNING: result for 'newHiScore' in Golgi Service 'TapTelegraph' has no expected response fields set!");
    }

}

- (void)processGolgiException:(GolgiException *)golgiException
{
	[receiver failureWithGolgiException:golgiException];
}

- (NewHiScoreInternalResponseHandler *)initWithReceiver:(id<TapTelegraphNewHiScoreResultReceiver>)_receiver orHandler:(void (^)(TapTelegraphNewHiScoreExceptionBundle *exceptionBundle))_handler
{
    self = [self init];
    receiver = _receiver;
    handler = _handler;
    return self;
}

@end

@implementation TapTelegraphNewPBExceptionBundle
@synthesize golgiException;
- (TapTelegraphNewPBExceptionBundle *) init
{
    self = [super init];

    golgiException = nil;
    return self;
}
@end

@interface NewPBInternalResultSender : NSObject <TapTelegraphNewPBResultSender>
{
    NSString *sender;
    NSString *msgId;
    TapTelegraph_newPB_rspArg *rsp;
}
- (NewPBInternalResultSender *) initWithSender:(NSString *)sender andMessageId:(NSString *)msgId;
@end
@implementation NewPBInternalResultSender
- (NSString *)getRequestSenderId
{
    return sender;
}

- (NewPBInternalResultSender *) initWithSender:(NSString *)_sender andMessageId:(NSString *)_msgId
{
    self = [self init];
    sender = _sender;
    msgId = _msgId;
    rsp = [[TapTelegraph_newPB_rspArg alloc] initWithIsSet:NO];

    return self;
}

- (void)sendResponse
{
    [Golgi sendResponsePayload:[rsp serialise] to:sender forMethod:@"newPB.TapTelegraph" withMessageId:msgId];
}

- (void)failureWithGolgiException:(GolgiException *)golgiException
{
    [rsp setGolgiException:golgiException];
    [self sendResponse];
}

- (void)success
{
    [rsp setInternalSuccess_:1];
    [self sendResponse];
}

@end

@interface NewPBInternalRequestHandler : NSObject <GolgiInternalInboundRequestHandler>
{
    id<TapTelegraphNewPBRequestReceiver> receiver;
    void (^userHandler)(id<TapTelegraphNewPBResultSender> resultSender, HiScoreData * hiScoreData);
}

- (NewPBInternalRequestHandler *)initWithReceiver:(id<TapTelegraphNewPBRequestReceiver>)receiver;
- (NewPBInternalRequestHandler *)initWithHandler:(void (^)(id<TapTelegraphNewPBResultSender> resultSender, HiScoreData * hiScoreData))userHandler;
@end

@implementation NewPBInternalRequestHandler

- (void)incomingMsg:(NSString *)payload from:(NSString *)sender withMessageId:(NSString *)msgId
{
    TapTelegraph_newPB_reqArg *req = [TapTelegraph_newPB_reqArg deserialiseFromString:payload];

    if(req == nil){
        [Golgi sendRemoteError:@"Garbled Payload at Remote End" to:sender forMethod:@"newPB.TapTelegraph" withMessageId:msgId];
    }
    else{
        // Process req here
        NewPBInternalResultSender *resultSender;
        resultSender = [NewPBInternalResultSender alloc];
        resultSender = [resultSender initWithSender:sender andMessageId:msgId];
        if(receiver != nil){
            [receiver newPBWithResultSender:resultSender andHiScoreData:[req getHiScoreData]];
        }
        else if(userHandler != nil){
            userHandler(resultSender, [req getHiScoreData]);    }
    }
}

- (NewPBInternalRequestHandler *)initWithReceiver:(id<TapTelegraphNewPBRequestReceiver>)_receiver
{
    self = [self init];
    receiver = _receiver;

    return self;
}
- (NewPBInternalRequestHandler *)initWithHandler:(void (^)(id<TapTelegraphNewPBResultSender> resultSender, HiScoreData * hiScoreData))_userHandler
{
    self = [self init];
    userHandler = _userHandler;

    return self;
}
@end

@interface NewPBInternalResponseHandler : NSObject <GolgiInternalInboundResponseHandler>
{
    id<TapTelegraphNewPBResultReceiver> receiver;
    void (^handler)(TapTelegraphNewPBExceptionBundle *exceptionBundle);
}

- (NewPBInternalResponseHandler *)initWithReceiver:(id<TapTelegraphNewPBResultReceiver>)receiver orHandler:(void (^)(TapTelegraphNewPBExceptionBundle *exceptionBundle))handler;
@end
@implementation NewPBInternalResponseHandler

- (void)processResponsePayload:(NSString *)payload
{
    TapTelegraph_newPB_rspArg *rsp = [TapTelegraph_newPB_rspArg deserialiseFromString:payload];
    TapTelegraphNewPBExceptionBundle *exBundle = [[TapTelegraphNewPBExceptionBundle alloc] init];

    if(rsp == nil){
        GolgiException *golgiException = [[GolgiException alloc]init];

        [golgiException setErrText:@"Corrupt Response"];
        [golgiException setErrType:GOLGI_ERRTYPE_PAYLOAD_MISMATCH];
        if(receiver != nil){
            [receiver failureWithGolgiException:golgiException];
        }
        else{ // Must have a handler
            exBundle.golgiException = golgiException;
            handler(exBundle);
        }
    }
    else if(rsp.internalSuccess_IsSet && ([rsp getInternalSuccess_] != 0)){
        if(receiver != nil){
            [receiver success];
        }
        else{ // Must have a handler
            handler(nil);
        }
    }
    else if(rsp.golgiExceptionIsSet){
        if(receiver != nil){
            [receiver failureWithGolgiException:[rsp getGolgiException]];
        }
        else{ // Must have a handler
            exBundle.golgiException = [rsp getGolgiException];
            handler(exBundle);
        }
    }
    else{
        NSLog(@"WARNING: result for 'newPB' in Golgi Service 'TapTelegraph' has no expected response fields set!");
    }

}

- (void)processGolgiException:(GolgiException *)golgiException
{
	[receiver failureWithGolgiException:golgiException];
}

- (NewPBInternalResponseHandler *)initWithReceiver:(id<TapTelegraphNewPBResultReceiver>)_receiver orHandler:(void (^)(TapTelegraphNewPBExceptionBundle *exceptionBundle))_handler
{
    self = [self init];
    receiver = _receiver;
    handler = _handler;
    return self;
}

@end



/********************************************************/
/********************************************************/
/********************************************************/


@implementation TapTelegraphSvc
//
// startGame
//
+ (void)sendStartGameUsingResultHandler:(void (^)(TapTelegraphStartGameExceptionBundle *))resultHandler withTransportOptions:(GolgiTransportOptions *)options andDestination:(NSString *)_dst withPlayerInfo:(PlayerInfo *)playerInfo
{
    [self sendStartGameUsingResultReceiver:nil
        orResultHandler:resultHandler
        withTransportOptions:options
        andDestination:_dst
        withPlayerInfo:playerInfo];
}

+ (void)sendStartGameUsingResultHandler:(void (^)(TapTelegraphStartGameExceptionBundle *))resultHandler andDestination:(NSString *)_dst withPlayerInfo:(PlayerInfo *)playerInfo
{
    [self sendStartGameUsingResultHandler:resultHandler
        withTransportOptions:nil
        andDestination:_dst
        withPlayerInfo:playerInfo];
}

+ (void)sendStartGameUsingResultReceiver:(id<TapTelegraphStartGameResultReceiver>)resultReceiver withTransportOptions:(GolgiTransportOptions *)options andDestination:(NSString *)_dst withPlayerInfo:(PlayerInfo *)playerInfo
{
    [self sendStartGameUsingResultReceiver:resultReceiver
        orResultHandler:nil
        withTransportOptions:options
        andDestination:_dst
        withPlayerInfo:playerInfo];
}

+ (void)sendStartGameUsingResultReceiver:(id<TapTelegraphStartGameResultReceiver>)resultReceiver andDestination:(NSString *)_dst withPlayerInfo:(PlayerInfo *)playerInfo
{
    [self sendStartGameUsingResultReceiver:resultReceiver
        withTransportOptions:nil
        andDestination:_dst
        withPlayerInfo:playerInfo];
}

//
// startGame with transport options and receiver/handler
//
+ (void)sendStartGameUsingResultReceiver:(id<TapTelegraphStartGameResultReceiver>)resultReceiver orResultHandler:(void (^)(TapTelegraphStartGameExceptionBundle *))resultHandler withTransportOptions:(GolgiTransportOptions *)options andDestination:(NSString *)_dst withPlayerInfo:(PlayerInfo *)playerInfo
{
    NSString *_payload;
    TapTelegraph_startGame_reqArg *_reqArg = [[TapTelegraph_startGame_reqArg alloc] init];
    StartGameInternalResponseHandler *_iRspHndlr;
    _iRspHndlr = [StartGameInternalResponseHandler alloc];
    _iRspHndlr = [_iRspHndlr initWithReceiver:resultReceiver orHandler:resultHandler];

    [_reqArg setPlayerInfo:playerInfo];
    _payload = [_reqArg serialise];

    [Golgi sendRequestPayload:_payload withTransportOptions:options to:_dst withMethod:@"startGame.TapTelegraph" andResponseHandler:_iRspHndlr];

}

//
// startGame using closure
//
// + (void)sendStartGameUsingResultHandler:(void (^)(TapTelegraphStartGameExceptionBundle *))resultHandler andDestination:(NSString *)_dst withPlayerInfo:(PlayerInfo *)playerInfo

+ (void)registerStartGameRequestReceiver:(id<TapTelegraphStartGameRequestReceiver>)requestReceiver
{
    StartGameInternalRequestHandler *reqHandler;
    reqHandler = [StartGameInternalRequestHandler alloc];
    reqHandler = [reqHandler initWithReceiver:requestReceiver];
    [Golgi registerRequestHandler:reqHandler forMethod:@"startGame.TapTelegraph"];
}

+ (void)registerStartGameRequestHandler:(void (^)(id<TapTelegraphStartGameResultSender> resultSender, PlayerInfo * playerInfo))requestHandler;
{
    StartGameInternalRequestHandler *reqHandler;
    reqHandler = [StartGameInternalRequestHandler alloc];
    reqHandler = [reqHandler initWithHandler:requestHandler];
    [Golgi registerRequestHandler:reqHandler forMethod:@"startGame.TapTelegraph"];
}

//
// sendTap
//
+ (void)sendSendTapUsingResultHandler:(void (^)(TapTelegraphSendTapExceptionBundle *))resultHandler withTransportOptions:(GolgiTransportOptions *)options andDestination:(NSString *)_dst withTapData:(TapData *)tapData
{
    [self sendSendTapUsingResultReceiver:nil
        orResultHandler:resultHandler
        withTransportOptions:options
        andDestination:_dst
        withTapData:tapData];
}

+ (void)sendSendTapUsingResultHandler:(void (^)(TapTelegraphSendTapExceptionBundle *))resultHandler andDestination:(NSString *)_dst withTapData:(TapData *)tapData
{
    [self sendSendTapUsingResultHandler:resultHandler
        withTransportOptions:nil
        andDestination:_dst
        withTapData:tapData];
}

+ (void)sendSendTapUsingResultReceiver:(id<TapTelegraphSendTapResultReceiver>)resultReceiver withTransportOptions:(GolgiTransportOptions *)options andDestination:(NSString *)_dst withTapData:(TapData *)tapData
{
    [self sendSendTapUsingResultReceiver:resultReceiver
        orResultHandler:nil
        withTransportOptions:options
        andDestination:_dst
        withTapData:tapData];
}

+ (void)sendSendTapUsingResultReceiver:(id<TapTelegraphSendTapResultReceiver>)resultReceiver andDestination:(NSString *)_dst withTapData:(TapData *)tapData
{
    [self sendSendTapUsingResultReceiver:resultReceiver
        withTransportOptions:nil
        andDestination:_dst
        withTapData:tapData];
}

//
// sendTap with transport options and receiver/handler
//
+ (void)sendSendTapUsingResultReceiver:(id<TapTelegraphSendTapResultReceiver>)resultReceiver orResultHandler:(void (^)(TapTelegraphSendTapExceptionBundle *))resultHandler withTransportOptions:(GolgiTransportOptions *)options andDestination:(NSString *)_dst withTapData:(TapData *)tapData
{
    NSString *_payload;
    TapTelegraph_sendTap_reqArg *_reqArg = [[TapTelegraph_sendTap_reqArg alloc] init];
    SendTapInternalResponseHandler *_iRspHndlr;
    _iRspHndlr = [SendTapInternalResponseHandler alloc];
    _iRspHndlr = [_iRspHndlr initWithReceiver:resultReceiver orHandler:resultHandler];

    [_reqArg setTapData:tapData];
    _payload = [_reqArg serialise];

    [Golgi sendRequestPayload:_payload withTransportOptions:options to:_dst withMethod:@"sendTap.TapTelegraph" andResponseHandler:_iRspHndlr];

}

//
// sendTap using closure
//
// + (void)sendSendTapUsingResultHandler:(void (^)(TapTelegraphSendTapExceptionBundle *))resultHandler andDestination:(NSString *)_dst withTapData:(TapData *)tapData

+ (void)registerSendTapRequestReceiver:(id<TapTelegraphSendTapRequestReceiver>)requestReceiver
{
    SendTapInternalRequestHandler *reqHandler;
    reqHandler = [SendTapInternalRequestHandler alloc];
    reqHandler = [reqHandler initWithReceiver:requestReceiver];
    [Golgi registerRequestHandler:reqHandler forMethod:@"sendTap.TapTelegraph"];
}

+ (void)registerSendTapRequestHandler:(void (^)(id<TapTelegraphSendTapResultSender> resultSender, TapData * tapData))requestHandler;
{
    SendTapInternalRequestHandler *reqHandler;
    reqHandler = [SendTapInternalRequestHandler alloc];
    reqHandler = [reqHandler initWithHandler:requestHandler];
    [Golgi registerRequestHandler:reqHandler forMethod:@"sendTap.TapTelegraph"];
}

//
// gameOver
//
+ (void)sendGameOverUsingResultHandler:(void (^)(TapTelegraphGameOverExceptionBundle *))resultHandler withTransportOptions:(GolgiTransportOptions *)options andDestination:(NSString *)_dst withGameOverData:(GameOverData *)gameOverData
{
    [self sendGameOverUsingResultReceiver:nil
        orResultHandler:resultHandler
        withTransportOptions:options
        andDestination:_dst
        withGameOverData:gameOverData];
}

+ (void)sendGameOverUsingResultHandler:(void (^)(TapTelegraphGameOverExceptionBundle *))resultHandler andDestination:(NSString *)_dst withGameOverData:(GameOverData *)gameOverData
{
    [self sendGameOverUsingResultHandler:resultHandler
        withTransportOptions:nil
        andDestination:_dst
        withGameOverData:gameOverData];
}

+ (void)sendGameOverUsingResultReceiver:(id<TapTelegraphGameOverResultReceiver>)resultReceiver withTransportOptions:(GolgiTransportOptions *)options andDestination:(NSString *)_dst withGameOverData:(GameOverData *)gameOverData
{
    [self sendGameOverUsingResultReceiver:resultReceiver
        orResultHandler:nil
        withTransportOptions:options
        andDestination:_dst
        withGameOverData:gameOverData];
}

+ (void)sendGameOverUsingResultReceiver:(id<TapTelegraphGameOverResultReceiver>)resultReceiver andDestination:(NSString *)_dst withGameOverData:(GameOverData *)gameOverData
{
    [self sendGameOverUsingResultReceiver:resultReceiver
        withTransportOptions:nil
        andDestination:_dst
        withGameOverData:gameOverData];
}

//
// gameOver with transport options and receiver/handler
//
+ (void)sendGameOverUsingResultReceiver:(id<TapTelegraphGameOverResultReceiver>)resultReceiver orResultHandler:(void (^)(TapTelegraphGameOverExceptionBundle *))resultHandler withTransportOptions:(GolgiTransportOptions *)options andDestination:(NSString *)_dst withGameOverData:(GameOverData *)gameOverData
{
    NSString *_payload;
    TapTelegraph_gameOver_reqArg *_reqArg = [[TapTelegraph_gameOver_reqArg alloc] init];
    GameOverInternalResponseHandler *_iRspHndlr;
    _iRspHndlr = [GameOverInternalResponseHandler alloc];
    _iRspHndlr = [_iRspHndlr initWithReceiver:resultReceiver orHandler:resultHandler];

    [_reqArg setGameOverData:gameOverData];
    _payload = [_reqArg serialise];

    [Golgi sendRequestPayload:_payload withTransportOptions:options to:_dst withMethod:@"gameOver.TapTelegraph" andResponseHandler:_iRspHndlr];

}

//
// gameOver using closure
//
// + (void)sendGameOverUsingResultHandler:(void (^)(TapTelegraphGameOverExceptionBundle *))resultHandler andDestination:(NSString *)_dst withGameOverData:(GameOverData *)gameOverData

+ (void)registerGameOverRequestReceiver:(id<TapTelegraphGameOverRequestReceiver>)requestReceiver
{
    GameOverInternalRequestHandler *reqHandler;
    reqHandler = [GameOverInternalRequestHandler alloc];
    reqHandler = [reqHandler initWithReceiver:requestReceiver];
    [Golgi registerRequestHandler:reqHandler forMethod:@"gameOver.TapTelegraph"];
}

+ (void)registerGameOverRequestHandler:(void (^)(id<TapTelegraphGameOverResultSender> resultSender, GameOverData * gameOverData))requestHandler;
{
    GameOverInternalRequestHandler *reqHandler;
    reqHandler = [GameOverInternalRequestHandler alloc];
    reqHandler = [reqHandler initWithHandler:requestHandler];
    [Golgi registerRequestHandler:reqHandler forMethod:@"gameOver.TapTelegraph"];
}

//
// streamGame
//
+ (void)sendStreamGameUsingResultHandler:(void (^)(TapTelegraphStreamGameExceptionBundle *))resultHandler withTransportOptions:(GolgiTransportOptions *)options andDestination:(NSString *)_dst withGolgiId:(NSString *)golgiId
{
    [self sendStreamGameUsingResultReceiver:nil
        orResultHandler:resultHandler
        withTransportOptions:options
        andDestination:_dst
        withGolgiId:golgiId];
}

+ (void)sendStreamGameUsingResultHandler:(void (^)(TapTelegraphStreamGameExceptionBundle *))resultHandler andDestination:(NSString *)_dst withGolgiId:(NSString *)golgiId
{
    [self sendStreamGameUsingResultHandler:resultHandler
        withTransportOptions:nil
        andDestination:_dst
        withGolgiId:golgiId];
}

+ (void)sendStreamGameUsingResultReceiver:(id<TapTelegraphStreamGameResultReceiver>)resultReceiver withTransportOptions:(GolgiTransportOptions *)options andDestination:(NSString *)_dst withGolgiId:(NSString *)golgiId
{
    [self sendStreamGameUsingResultReceiver:resultReceiver
        orResultHandler:nil
        withTransportOptions:options
        andDestination:_dst
        withGolgiId:golgiId];
}

+ (void)sendStreamGameUsingResultReceiver:(id<TapTelegraphStreamGameResultReceiver>)resultReceiver andDestination:(NSString *)_dst withGolgiId:(NSString *)golgiId
{
    [self sendStreamGameUsingResultReceiver:resultReceiver
        withTransportOptions:nil
        andDestination:_dst
        withGolgiId:golgiId];
}

//
// streamGame with transport options and receiver/handler
//
+ (void)sendStreamGameUsingResultReceiver:(id<TapTelegraphStreamGameResultReceiver>)resultReceiver orResultHandler:(void (^)(TapTelegraphStreamGameExceptionBundle *))resultHandler withTransportOptions:(GolgiTransportOptions *)options andDestination:(NSString *)_dst withGolgiId:(NSString *)golgiId
{
    NSString *_payload;
    TapTelegraph_streamGame_reqArg *_reqArg = [[TapTelegraph_streamGame_reqArg alloc] init];
    StreamGameInternalResponseHandler *_iRspHndlr;
    _iRspHndlr = [StreamGameInternalResponseHandler alloc];
    _iRspHndlr = [_iRspHndlr initWithReceiver:resultReceiver orHandler:resultHandler];

    [_reqArg setGolgiId:golgiId];
    _payload = [_reqArg serialise];

    [Golgi sendRequestPayload:_payload withTransportOptions:options to:_dst withMethod:@"streamGame.TapTelegraph" andResponseHandler:_iRspHndlr];

}

//
// streamGame using closure
//
// + (void)sendStreamGameUsingResultHandler:(void (^)(TapTelegraphStreamGameExceptionBundle *))resultHandler andDestination:(NSString *)_dst withGolgiId:(NSString *)golgiId

+ (void)registerStreamGameRequestReceiver:(id<TapTelegraphStreamGameRequestReceiver>)requestReceiver
{
    StreamGameInternalRequestHandler *reqHandler;
    reqHandler = [StreamGameInternalRequestHandler alloc];
    reqHandler = [reqHandler initWithReceiver:requestReceiver];
    [Golgi registerRequestHandler:reqHandler forMethod:@"streamGame.TapTelegraph"];
}

+ (void)registerStreamGameRequestHandler:(void (^)(id<TapTelegraphStreamGameResultSender> resultSender, NSString * golgiId))requestHandler;
{
    StreamGameInternalRequestHandler *reqHandler;
    reqHandler = [StreamGameInternalRequestHandler alloc];
    reqHandler = [reqHandler initWithHandler:requestHandler];
    [Golgi registerRequestHandler:reqHandler forMethod:@"streamGame.TapTelegraph"];
}

//
// getHiScore
//
+ (void)sendGetHiScoreUsingResultHandler:(void (^)(HiScoreData *, TapTelegraphGetHiScoreExceptionBundle *))resultHandler withTransportOptions:(GolgiTransportOptions *)options andDestination:(NSString *)_dst withPooky:(NSInteger)pooky
{
    [self sendGetHiScoreUsingResultReceiver:nil
        orResultHandler:resultHandler
        withTransportOptions:options
        andDestination:_dst
        withPooky:pooky];
}

+ (void)sendGetHiScoreUsingResultHandler:(void (^)(HiScoreData *, TapTelegraphGetHiScoreExceptionBundle *))resultHandler andDestination:(NSString *)_dst withPooky:(NSInteger)pooky
{
    [self sendGetHiScoreUsingResultHandler:resultHandler
        withTransportOptions:nil
        andDestination:_dst
        withPooky:pooky];
}

+ (void)sendGetHiScoreUsingResultReceiver:(id<TapTelegraphGetHiScoreResultReceiver>)resultReceiver withTransportOptions:(GolgiTransportOptions *)options andDestination:(NSString *)_dst withPooky:(NSInteger)pooky
{
    [self sendGetHiScoreUsingResultReceiver:resultReceiver
        orResultHandler:nil
        withTransportOptions:options
        andDestination:_dst
        withPooky:pooky];
}

+ (void)sendGetHiScoreUsingResultReceiver:(id<TapTelegraphGetHiScoreResultReceiver>)resultReceiver andDestination:(NSString *)_dst withPooky:(NSInteger)pooky
{
    [self sendGetHiScoreUsingResultReceiver:resultReceiver
        withTransportOptions:nil
        andDestination:_dst
        withPooky:pooky];
}

//
// getHiScore with transport options and receiver/handler
//
+ (void)sendGetHiScoreUsingResultReceiver:(id<TapTelegraphGetHiScoreResultReceiver>)resultReceiver orResultHandler:(void (^)(HiScoreData *, TapTelegraphGetHiScoreExceptionBundle *))resultHandler withTransportOptions:(GolgiTransportOptions *)options andDestination:(NSString *)_dst withPooky:(NSInteger)pooky
{
    NSString *_payload;
    TapTelegraph_getHiScore_reqArg *_reqArg = [[TapTelegraph_getHiScore_reqArg alloc] init];
    GetHiScoreInternalResponseHandler *_iRspHndlr;
    _iRspHndlr = [GetHiScoreInternalResponseHandler alloc];
    _iRspHndlr = [_iRspHndlr initWithReceiver:resultReceiver orHandler:resultHandler];

    [_reqArg setPooky:pooky];
    _payload = [_reqArg serialise];

    [Golgi sendRequestPayload:_payload withTransportOptions:options to:_dst withMethod:@"getHiScore.TapTelegraph" andResponseHandler:_iRspHndlr];

}

//
// getHiScore using closure
//
// + (void)sendGetHiScoreUsingResultHandler:(void (^)(HiScoreData *, TapTelegraphGetHiScoreExceptionBundle *))resultHandler andDestination:(NSString *)_dst withPooky:(NSInteger)pooky

+ (void)registerGetHiScoreRequestReceiver:(id<TapTelegraphGetHiScoreRequestReceiver>)requestReceiver
{
    GetHiScoreInternalRequestHandler *reqHandler;
    reqHandler = [GetHiScoreInternalRequestHandler alloc];
    reqHandler = [reqHandler initWithReceiver:requestReceiver];
    [Golgi registerRequestHandler:reqHandler forMethod:@"getHiScore.TapTelegraph"];
}

+ (void)registerGetHiScoreRequestHandler:(void (^)(id<TapTelegraphGetHiScoreResultSender> resultSender, NSInteger pooky))requestHandler;
{
    GetHiScoreInternalRequestHandler *reqHandler;
    reqHandler = [GetHiScoreInternalRequestHandler alloc];
    reqHandler = [reqHandler initWithHandler:requestHandler];
    [Golgi registerRequestHandler:reqHandler forMethod:@"getHiScore.TapTelegraph"];
}

//
// newHiScore
//
+ (void)sendNewHiScoreUsingResultHandler:(void (^)(TapTelegraphNewHiScoreExceptionBundle *))resultHandler withTransportOptions:(GolgiTransportOptions *)options andDestination:(NSString *)_dst withHiScoreData:(HiScoreData *)hiScoreData
{
    [self sendNewHiScoreUsingResultReceiver:nil
        orResultHandler:resultHandler
        withTransportOptions:options
        andDestination:_dst
        withHiScoreData:hiScoreData];
}

+ (void)sendNewHiScoreUsingResultHandler:(void (^)(TapTelegraphNewHiScoreExceptionBundle *))resultHandler andDestination:(NSString *)_dst withHiScoreData:(HiScoreData *)hiScoreData
{
    [self sendNewHiScoreUsingResultHandler:resultHandler
        withTransportOptions:nil
        andDestination:_dst
        withHiScoreData:hiScoreData];
}

+ (void)sendNewHiScoreUsingResultReceiver:(id<TapTelegraphNewHiScoreResultReceiver>)resultReceiver withTransportOptions:(GolgiTransportOptions *)options andDestination:(NSString *)_dst withHiScoreData:(HiScoreData *)hiScoreData
{
    [self sendNewHiScoreUsingResultReceiver:resultReceiver
        orResultHandler:nil
        withTransportOptions:options
        andDestination:_dst
        withHiScoreData:hiScoreData];
}

+ (void)sendNewHiScoreUsingResultReceiver:(id<TapTelegraphNewHiScoreResultReceiver>)resultReceiver andDestination:(NSString *)_dst withHiScoreData:(HiScoreData *)hiScoreData
{
    [self sendNewHiScoreUsingResultReceiver:resultReceiver
        withTransportOptions:nil
        andDestination:_dst
        withHiScoreData:hiScoreData];
}

//
// newHiScore with transport options and receiver/handler
//
+ (void)sendNewHiScoreUsingResultReceiver:(id<TapTelegraphNewHiScoreResultReceiver>)resultReceiver orResultHandler:(void (^)(TapTelegraphNewHiScoreExceptionBundle *))resultHandler withTransportOptions:(GolgiTransportOptions *)options andDestination:(NSString *)_dst withHiScoreData:(HiScoreData *)hiScoreData
{
    NSString *_payload;
    TapTelegraph_newHiScore_reqArg *_reqArg = [[TapTelegraph_newHiScore_reqArg alloc] init];
    NewHiScoreInternalResponseHandler *_iRspHndlr;
    _iRspHndlr = [NewHiScoreInternalResponseHandler alloc];
    _iRspHndlr = [_iRspHndlr initWithReceiver:resultReceiver orHandler:resultHandler];

    [_reqArg setHiScoreData:hiScoreData];
    _payload = [_reqArg serialise];

    [Golgi sendRequestPayload:_payload withTransportOptions:options to:_dst withMethod:@"newHiScore.TapTelegraph" andResponseHandler:_iRspHndlr];

}

//
// newHiScore using closure
//
// + (void)sendNewHiScoreUsingResultHandler:(void (^)(TapTelegraphNewHiScoreExceptionBundle *))resultHandler andDestination:(NSString *)_dst withHiScoreData:(HiScoreData *)hiScoreData

+ (void)registerNewHiScoreRequestReceiver:(id<TapTelegraphNewHiScoreRequestReceiver>)requestReceiver
{
    NewHiScoreInternalRequestHandler *reqHandler;
    reqHandler = [NewHiScoreInternalRequestHandler alloc];
    reqHandler = [reqHandler initWithReceiver:requestReceiver];
    [Golgi registerRequestHandler:reqHandler forMethod:@"newHiScore.TapTelegraph"];
}

+ (void)registerNewHiScoreRequestHandler:(void (^)(id<TapTelegraphNewHiScoreResultSender> resultSender, HiScoreData * hiScoreData))requestHandler;
{
    NewHiScoreInternalRequestHandler *reqHandler;
    reqHandler = [NewHiScoreInternalRequestHandler alloc];
    reqHandler = [reqHandler initWithHandler:requestHandler];
    [Golgi registerRequestHandler:reqHandler forMethod:@"newHiScore.TapTelegraph"];
}

//
// newPB
//
+ (void)sendNewPBUsingResultHandler:(void (^)(TapTelegraphNewPBExceptionBundle *))resultHandler withTransportOptions:(GolgiTransportOptions *)options andDestination:(NSString *)_dst withHiScoreData:(HiScoreData *)hiScoreData
{
    [self sendNewPBUsingResultReceiver:nil
        orResultHandler:resultHandler
        withTransportOptions:options
        andDestination:_dst
        withHiScoreData:hiScoreData];
}

+ (void)sendNewPBUsingResultHandler:(void (^)(TapTelegraphNewPBExceptionBundle *))resultHandler andDestination:(NSString *)_dst withHiScoreData:(HiScoreData *)hiScoreData
{
    [self sendNewPBUsingResultHandler:resultHandler
        withTransportOptions:nil
        andDestination:_dst
        withHiScoreData:hiScoreData];
}

+ (void)sendNewPBUsingResultReceiver:(id<TapTelegraphNewPBResultReceiver>)resultReceiver withTransportOptions:(GolgiTransportOptions *)options andDestination:(NSString *)_dst withHiScoreData:(HiScoreData *)hiScoreData
{
    [self sendNewPBUsingResultReceiver:resultReceiver
        orResultHandler:nil
        withTransportOptions:options
        andDestination:_dst
        withHiScoreData:hiScoreData];
}

+ (void)sendNewPBUsingResultReceiver:(id<TapTelegraphNewPBResultReceiver>)resultReceiver andDestination:(NSString *)_dst withHiScoreData:(HiScoreData *)hiScoreData
{
    [self sendNewPBUsingResultReceiver:resultReceiver
        withTransportOptions:nil
        andDestination:_dst
        withHiScoreData:hiScoreData];
}

//
// newPB with transport options and receiver/handler
//
+ (void)sendNewPBUsingResultReceiver:(id<TapTelegraphNewPBResultReceiver>)resultReceiver orResultHandler:(void (^)(TapTelegraphNewPBExceptionBundle *))resultHandler withTransportOptions:(GolgiTransportOptions *)options andDestination:(NSString *)_dst withHiScoreData:(HiScoreData *)hiScoreData
{
    NSString *_payload;
    TapTelegraph_newPB_reqArg *_reqArg = [[TapTelegraph_newPB_reqArg alloc] init];
    NewPBInternalResponseHandler *_iRspHndlr;
    _iRspHndlr = [NewPBInternalResponseHandler alloc];
    _iRspHndlr = [_iRspHndlr initWithReceiver:resultReceiver orHandler:resultHandler];

    [_reqArg setHiScoreData:hiScoreData];
    _payload = [_reqArg serialise];

    [Golgi sendRequestPayload:_payload withTransportOptions:options to:_dst withMethod:@"newPB.TapTelegraph" andResponseHandler:_iRspHndlr];

}

//
// newPB using closure
//
// + (void)sendNewPBUsingResultHandler:(void (^)(TapTelegraphNewPBExceptionBundle *))resultHandler andDestination:(NSString *)_dst withHiScoreData:(HiScoreData *)hiScoreData

+ (void)registerNewPBRequestReceiver:(id<TapTelegraphNewPBRequestReceiver>)requestReceiver
{
    NewPBInternalRequestHandler *reqHandler;
    reqHandler = [NewPBInternalRequestHandler alloc];
    reqHandler = [reqHandler initWithReceiver:requestReceiver];
    [Golgi registerRequestHandler:reqHandler forMethod:@"newPB.TapTelegraph"];
}

+ (void)registerNewPBRequestHandler:(void (^)(id<TapTelegraphNewPBResultSender> resultSender, HiScoreData * hiScoreData))requestHandler;
{
    NewPBInternalRequestHandler *reqHandler;
    reqHandler = [NewPBInternalRequestHandler alloc];
    reqHandler = [reqHandler initWithHandler:requestHandler];
    [Golgi registerRequestHandler:reqHandler forMethod:@"newPB.TapTelegraph"];
}

@end
